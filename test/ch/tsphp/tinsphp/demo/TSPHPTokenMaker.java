/* The following code was generated by JFlex 1.6.1 */

/*
 * TSPHPTokenMaker.java - Generates tokens for TSPHP syntax highlighting.
 *
 * - Use in conjunction with the skeleton.default.
 * - use --legacydot
 * command as follows:
    jflex -skel skeleton.default TSPHPTokenMaker.flex

 * - Additionally, the following:
    zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
    zzCurrentPosL += Character.charCount(zzInput);

 * needs to be replaced with
    zzInput = zzBufferL[zzCurrentPosL++];

 *
 * Based on the following TokenMaker:
 */

 /*
 *
 * 01/28/2009
 *
 * PHPTokenMaker.java - Generates tokens for PHP syntax highlighting.
 *
 * This library is distributed under a modified BSD license.  See the included
 * RSyntaxTextArea.License.txt file for details.
 */
package ch.tsphp.tinsphp.demo;

import org.fife.ui.rsyntaxtextarea.HtmlOccurrenceMarker;
import org.fife.ui.rsyntaxtextarea.OccurrenceMarker;
import org.fife.ui.rsyntaxtextarea.Token;
import org.fife.ui.rsyntaxtextarea.TokenImpl;
import org.fife.ui.rsyntaxtextarea.modes.AbstractMarkupTokenMaker;

import javax.swing.text.Segment;
import java.io.IOException;
import java.io.Reader;


/**
 * Scanner for PHP files.
 * <p/>
 * This implementation was created using
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1; however, the generated file
 * was modified for performance.  Memory allocation needs to be almost
 * completely removed to be competitive with the handwritten lexers (subclasses
 * of <code>AbstractTokenMaker</code>, so this class has been modified so that
 * Strings are never allocated (via yytext()), and the scanner never has to
 * worry about refilling its buffer (needlessly copying chars around).
 * We can achieve this because RText always scans exactly 1 line of tokens at a
 * time, and hands the scanner this line as an array of characters (a Segment
 * really).  Since tokens contain pointers to char arrays instead of Strings
 * holding their contents, there is no need for allocating new memory for
 * Strings.<p>
 * <p/>
 * The actual algorithm generated for scanning has, of course, not been
 * modified.<p>
 * <p/>
 * If you wish to regenerate this file yourself, keep in mind the following:
 * <ul>
 * <li>The generated <code>PHPTokenMaker.java</code> file will contain two
 * definitions of both <code>zzRefill</code> and <code>yyreset</code>.
 * You should hand-delete the second of each definition (the ones
 * generated by the lexer), as these generated methods modify the input
 * buffer, which we'll never have to do.</li>
 * <li>You should also change the declaration/definition of zzBuffer to NOT
 * be initialized.  This is a needless memory allocation for us since we
 * will be pointing the array somewhere else anyway.</li>
 * <li>You should NOT call <code>yylex()</code> on the generated scanner
 * directly; rather, you should use <code>getTokenList</code> as you would
 * with any other <code>TokenMaker</code> instance.</li>
 * </ul>
 *
 * @author Robert Futrell
 * @version 0.9
 */

public class TSPHPTokenMaker extends AbstractMarkupTokenMaker
{

    /**
     * This character denotes the end of file
     */
    public static final int YYEOF = -1;

    /**
     * initial size of the lookahead buffer
     */
    private static final int ZZ_BUFFERSIZE = 16384;

    /**
     * lexical states
     */
    public static final int YYINITIAL = 0;
    public static final int PHP_MLC = 2;
    public static final int PHP_STRING = 4;
    public static final int PHP_CHAR = 6;
    public static final int Function = 8;

    /**
     * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
     * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
     * at the beginning of a line
     * l is of the form l = 2*k, k a non negative integer
     */
    private static final int ZZ_LEXSTATE[] = {
            0, 0, 1, 1, 2, 2, 3, 3, 4, 4
    };

    /**
     * Translates characters to character classes
     */
    private static final String ZZ_CMAP_PACKED =
            "\11\0\1\4\1\2\1\54\1\1\1\33\22\0\1\4\1\47\1\7" +
                    "\1\34\1\36\1\47\1\5\1\110\2\107\1\37\1\42\1\6\1\31" +
                    "\1\43\1\10\1\25\7\27\2\24\1\51\1\6\1\3\1\45\1\17" +
                    "\1\50\1\106\1\76\1\71\1\12\1\41\1\22\1\75\1\20\1\114" +
                    "\1\14\1\70\1\20\1\21\1\113\1\77\1\112\1\15\1\20\1\13" +
                    "\1\11\1\16\1\74\2\20\1\40\1\20\1\20\1\107\1\35\1\107" +
                    "\1\46\1\30\1\0\1\63\1\26\1\104\1\103\1\61\1\62\1\100" +
                    "\1\67\1\55\1\23\1\115\1\64\1\56\1\73\1\72\1\66\1\116" +
                    "\1\60\1\65\1\57\1\32\1\105\1\111\1\102\1\101\1\23\1\44" +
                    "\1\53\1\44\1\52\6\0\1\54\u1fa2\0\1\54\1\54\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff" +
                    "\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

    /**
     * Translates characters to character classes
     */
    private static final char[] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

    /**
     * Translates DFA states to action switch labels.
     */
    private static final int[] ZZ_ACTION = zzUnpackAction();

    private static final String ZZ_ACTION_PACKED_0 =
            "\5\0\1\1\1\2\1\3\2\4\1\5\1\6\1\4" +
                    "\1\7\1\10\1\4\1\5\2\11\2\5\1\4\1\5" +
                    "\1\12\1\5\2\4\1\5\1\13\2\4\13\5\1\7" +
                    "\2\5\2\7\5\5\1\1\1\14\1\5\1\15\1\16" +
                    "\5\15\1\17\1\20\1\21\2\15\1\22\1\23\1\24" +
                    "\1\25\1\7\1\10\12\26\1\0\1\12\1\27\1\7" +
                    "\1\10\1\4\1\30\1\11\1\30\2\31\1\30\1\32" +
                    "\1\30\5\5\1\33\1\34\1\5\1\35\33\5\1\7" +
                    "\4\5\2\7\11\5\1\36\1\5\1\37\4\0\1\21" +
                    "\1\40\1\23\13\26\2\0\1\7\1\31\1\0\2\32" +
                    "\11\5\1\41\21\5\1\35\15\5\1\7\1\5\1\41" +
                    "\2\5\2\7\13\5\4\0\1\26\1\41\11\26\1\0" +
                    "\1\42\1\43\17\5\1\35\4\5\1\44\15\5\1\7" +
                    "\1\5\1\35\1\5\1\35\6\5\2\0\1\45\4\26" +
                    "\30\5\1\7\4\5\2\0\3\26\15\5\1\7\2\5" +
                    "\1\26\6\5\1\35\3\5\1\7\1\5\1\26\5\5" +
                    "\1\46\1\7\4\5\10\7";

    private static int[] zzUnpackAction() {
        int[] result = new int[389];
        int offset = 0;
        offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAction(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do {
                result[j++] = value;
            } while (--count > 0);
        }
        return j;
    }


    /**
     * Translates a state to a row index in the transition table
     */
    private static final int[] ZZ_ROWMAP = zzUnpackRowMap();

    private static final String ZZ_ROWMAP_PACKED_0 =
            "\0\0\0\117\0\236\0\355\0\u013c\0\u018b\0\u01da\0\u0229" +
                    "\0\u0278\0\u02c7\0\u0229\0\u0229\0\u0316\0\u0365\0\u03b4\0\u0403" +
                    "\0\u0452\0\u04a1\0\u04f0\0\u053f\0\u058e\0\u05dd\0\u062c\0\u067b" +
                    "\0\u06ca\0\u0719\0\u0768\0\u07b7\0\u0229\0\u0806\0\u0229\0\u0855" +
                    "\0\u08a4\0\u08f3\0\u0942\0\u0991\0\u09e0\0\u0a2f\0\u0a7e\0\u0acd" +
                    "\0\u0b1c\0\u0b6b\0\u0bba\0\u0c09\0\u0c58\0\u0ca7\0\u0cf6\0\u0d45" +
                    "\0\u0d94\0\u0de3\0\u0e32\0\u0e81\0\u0ed0\0\u0229\0\u0f1f\0\u0f6e" +
                    "\0\u0229\0\u0fbd\0\u100c\0\u105b\0\u10aa\0\u10f9\0\u0229\0\u0229" +
                    "\0\u1148\0\u1197\0\u11e6\0\u0229\0\u1235\0\u0229\0\u0229\0\u1284" +
                    "\0\u12d3\0\u1322\0\u1371\0\u13c0\0\u140f\0\u145e\0\u14ad\0\u14fc" +
                    "\0\u154b\0\u159a\0\u15e9\0\u1638\0\u1687\0\u16d6\0\u1725\0\u1774" +
                    "\0\u17c3\0\u1812\0\u1812\0\u1861\0\u1812\0\u18b0\0\u18ff\0\u194e" +
                    "\0\u199d\0\u19ec\0\u1a3b\0\u1a8a\0\u1ad9\0\u1b28\0\u1b77\0\u0229" +
                    "\0\u1bc6\0\u0452\0\u1c15\0\u1c64\0\u1cb3\0\u1d02\0\u1d51\0\u1da0" +
                    "\0\u1def\0\u1e3e\0\u1e8d\0\u1edc\0\u1f2b\0\u1f7a\0\u1fc9\0\u2018" +
                    "\0\u2067\0\u20b6\0\u2105\0\u2154\0\u21a3\0\u21f2\0\u2241\0\u2290" +
                    "\0\u22df\0\u232e\0\u237d\0\u23cc\0\u241b\0\u246a\0\u24b9\0\u2508" +
                    "\0\u2557\0\u25a6\0\u25f5\0\u2644\0\u2693\0\u26e2\0\u2731\0\u2780" +
                    "\0\u27cf\0\u281e\0\u286d\0\u28bc\0\u290b\0\u295a\0\u29a9\0\u0229" +
                    "\0\u29f8\0\u2a47\0\u2a96\0\u2ae5\0\u0229\0\u2b34\0\u0229\0\u2b83" +
                    "\0\u2bd2\0\u2c21\0\u2c70\0\u2cbf\0\u2d0e\0\u2d5d\0\u2dac\0\u2dfb" +
                    "\0\u2e4a\0\u2e99\0\u2ee8\0\u2f37\0\u2f86\0\u2fd5\0\u3024\0\u1812" +
                    "\0\u3073\0\u30c2\0\u3111\0\u3160\0\u31af\0\u31fe\0\u324d\0\u329c" +
                    "\0\u32eb\0\u333a\0\u3389\0\u33d8\0\u3427\0\u3476\0\u34c5\0\u3514" +
                    "\0\u3563\0\u35b2\0\u3601\0\u3650\0\u369f\0\u36ee\0\u373d\0\u378c" +
                    "\0\u37db\0\u382a\0\u3879\0\u38c8\0\u3917\0\u3966\0\u39b5\0\u3a04" +
                    "\0\u3a53\0\u3aa2\0\u3af1\0\u3b40\0\u3b8f\0\u3bde\0\u3c2d\0\u3c7c" +
                    "\0\u3ccb\0\u3d1a\0\u3d69\0\u3db8\0\u0452\0\u3e07\0\u3e56\0\u3ea5" +
                    "\0\u3ef4\0\u3f43\0\u3f92\0\u3fe1\0\u4030\0\u407f\0\u40ce\0\u411d" +
                    "\0\u416c\0\u41bb\0\u420a\0\u4259\0\u42a8\0\u42f7\0\u4346\0\u4395" +
                    "\0\u43e4\0\u1322\0\u4433\0\u4482\0\u44d1\0\u4520\0\u456f\0\u45be" +
                    "\0\u460d\0\u465c\0\u46ab\0\u46fa\0\u0229\0\u0365\0\u4749\0\u4798" +
                    "\0\u47e7\0\u4836\0\u4885\0\u48d4\0\u4923\0\u4972\0\u49c1\0\u4a10" +
                    "\0\u4a5f\0\u4aae\0\u4afd\0\u4b4c\0\u4b9b\0\u4bea\0\u4c39\0\u4c88" +
                    "\0\u4cd7\0\u4d26\0\u0452\0\u4d75\0\u4dc4\0\u4e13\0\u4e62\0\u4eb1" +
                    "\0\u4f00\0\u4f4f\0\u4f9e\0\u4fed\0\u503c\0\u508b\0\u50da\0\u5129" +
                    "\0\u5178\0\u51c7\0\u4aae\0\u5216\0\u0365\0\u5265\0\u52b4\0\u5303" +
                    "\0\u5352\0\u53a1\0\u53f0\0\u543f\0\u548e\0\u54dd\0\u552c\0\u557b" +
                    "\0\u55ca\0\u5619\0\u5668\0\u56b7\0\u5706\0\u5755\0\u57a4\0\u57f3" +
                    "\0\u5842\0\u5891\0\u58e0\0\u592f\0\u597e\0\u59cd\0\u5a1c\0\u5a6b" +
                    "\0\u5aba\0\u5b09\0\u5b58\0\u5ba7\0\u5bf6\0\u5c45\0\u5c94\0\u5ce3" +
                    "\0\u5d32\0\u5d81\0\u5dd0\0\u5e1f\0\u5e6e\0\u5ebd\0\u5f0c\0\u5f5b" +
                    "\0\u54dd\0\u5faa\0\u5ff9\0\u6048\0\u6097\0\u60e6\0\u6135\0\u6184" +
                    "\0\u61d3\0\u6222\0\u6271\0\u62c0\0\u630f\0\u635e\0\u63ad\0\u63fc" +
                    "\0\u644b\0\u649a\0\u64e9\0\u6538\0\u6587\0\u65d6\0\u6625\0\u6674" +
                    "\0\u66c3\0\u6712\0\u6761\0\u67b0\0\u67ff\0\u684e\0\u689d\0\u68ec" +
                    "\0\u693b\0\u698a\0\u69d9\0\u6a28\0\u6a77\0\u6ac6\0\u6b15\0\u0452" +
                    "\0\u6b64\0\u6bb3\0\u6c02\0\u6c51\0\u6ca0\0\u6cef\0\u6d3e\0\u6d8d" +
                    "\0\u6ddc\0\u6e2b\0\u6e7a\0\u6ec9\0\u6f18";

    private static int[] zzUnpackRowMap() {
        int[] result = new int[389];
        int offset = 0;
        offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackRowMap(String packed, int offset, int[] result) {
        int i = 0;  /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int high = packed.charAt(i++) << 16;
            result[j++] = high | packed.charAt(i++);
        }
        return j;
    }

    /**
     * The transition table of the DFA
     */
    private static final int[] ZZ_TRANS = zzUnpackTrans();

    private static final String ZZ_TRANS_PACKED_0 =
            "\1\6\1\7\1\10\1\11\1\7\1\12\1\13\1\14" +
                    "\1\15\5\16\1\17\1\20\3\16\1\21\1\22\1\23" +
                    "\1\24\1\22\1\25\1\26\1\27\1\13\1\30\1\21" +
                    "\1\31\1\32\2\16\1\33\1\34\1\35\3\32\1\36" +
                    "\2\37\1\40\1\6\1\41\1\42\1\43\1\44\1\45" +
                    "\1\46\1\47\1\50\1\51\1\52\1\21\1\53\1\16" +
                    "\1\54\1\55\1\16\1\56\1\16\1\57\1\60\1\21" +
                    "\1\61\1\62\1\63\1\64\1\65\1\35\1\66\1\67" +
                    "\3\16\2\21\2\70\1\71\34\70\1\72\22\70\1\73" +
                    "\4\70\1\74\21\70\1\75\5\70\2\76\1\77\4\76" +
                    "\1\100\25\76\1\101\1\102\60\76\2\103\1\104\32\103" +
                    "\1\105\52\103\1\106\6\103\1\107\1\7\1\0\1\37" +
                    "\1\7\4\107\5\110\1\111\1\37\3\110\1\112\2\107" +
                    "\1\113\1\107\1\112\1\107\1\112\2\107\2\112\1\107" +
                    "\2\110\13\107\1\114\1\115\1\116\2\112\1\117\1\120" +
                    "\1\112\1\121\2\112\2\110\1\112\1\122\4\110\5\112" +
                    "\1\123\3\107\1\112\3\110\2\112\1\6\10\0\6\6" +
                    "\1\0\11\6\1\0\1\6\1\0\3\6\1\0\2\6" +
                    "\12\0\33\6\2\0\6\6\1\0\1\7\2\0\1\7" +
                    "\234\0\1\32\41\0\1\37\2\0\1\124\53\0\1\37" +
                    "\37\0\1\37\61\0\1\125\26\0\1\126\5\0\1\37" +
                    "\51\0\1\6\10\0\6\16\1\0\11\16\1\0\1\16" +
                    "\1\0\1\6\2\16\1\0\2\16\12\0\1\6\31\16" +
                    "\1\6\2\0\6\16\1\6\10\0\2\16\1\127\3\16" +
                    "\1\0\4\16\2\130\1\16\1\130\1\16\1\0\1\16" +
                    "\1\0\1\6\2\16\1\0\2\16\12\0\1\6\31\16" +
                    "\1\6\2\0\6\16\17\0\1\131\25\0\1\37\51\0" +
                    "\1\6\10\0\6\21\1\0\11\21\1\0\1\21\1\0" +
                    "\1\6\2\21\1\0\2\21\12\0\1\6\31\21\1\6" +
                    "\2\0\6\21\1\132\10\0\6\132\1\0\1\132\1\133" +
                    "\1\134\1\132\2\22\1\132\1\22\1\132\1\0\1\132" +
                    "\1\0\3\132\1\0\1\132\1\135\1\0\1\136\10\0" +
                    "\5\132\1\134\1\135\1\132\1\133\10\132\1\135\5\132" +
                    "\1\135\3\132\2\0\7\132\10\0\6\132\1\0\1\132" +
                    "\1\133\1\134\1\132\1\137\1\140\1\132\1\140\1\132" +
                    "\1\0\1\132\1\0\3\132\1\0\1\141\1\135\1\0" +
                    "\1\136\10\0\5\132\1\134\1\135\1\132\1\133\10\132" +
                    "\1\135\4\132\1\141\1\135\3\132\2\0\6\132\1\6" +
                    "\10\0\6\21\1\0\11\21\1\0\1\21\1\0\1\6" +
                    "\2\21\1\0\2\21\12\0\1\6\3\21\1\142\11\21" +
                    "\1\143\13\21\1\6\2\0\6\21\1\6\10\0\6\21" +
                    "\1\0\10\21\1\144\1\0\1\21\1\0\1\6\2\21" +
                    "\1\0\2\21\12\0\1\6\31\21\1\6\2\0\6\21" +
                    "\31\0\1\37\13\0\1\37\51\0\1\6\10\0\6\21" +
                    "\1\0\11\21\1\0\1\21\1\0\1\6\2\21\1\0" +
                    "\2\21\12\0\1\6\10\21\1\145\5\21\1\146\12\21" +
                    "\1\6\2\0\6\21\1\30\2\0\6\125\6\30\1\125" +
                    "\11\30\1\125\1\30\1\0\3\30\1\125\2\30\12\125" +
                    "\1\6\32\30\2\125\6\30\1\6\10\0\6\147\1\0" +
                    "\4\147\2\21\1\147\1\21\1\147\1\0\1\147\1\0" +
                    "\1\6\2\21\1\0\2\147\12\0\1\6\31\147\1\6" +
                    "\2\0\6\147\45\0\1\37\113\0\1\37\2\0\1\37" +
                    "\75\0\2\136\1\0\1\136\106\0\1\150\144\0\1\37" +
                    "\5\0\1\37\43\0\1\6\10\0\6\21\1\0\11\21" +
                    "\1\0\1\21\1\0\1\6\2\21\1\0\2\21\12\0" +
                    "\1\6\1\21\1\151\3\21\1\152\2\21\1\146\5\21" +
                    "\1\153\12\21\1\6\2\0\6\21\1\6\10\0\6\21" +
                    "\1\0\11\21\1\0\1\21\1\0\1\6\2\21\1\0" +
                    "\2\21\12\0\1\6\1\154\30\21\1\6\2\0\6\21" +
                    "\1\6\10\0\6\21\1\0\11\21\1\0\1\21\1\0" +
                    "\1\6\2\21\1\0\2\21\12\0\1\6\3\21\1\155" +
                    "\6\21\1\156\16\21\1\6\2\0\6\21\1\6\10\0" +
                    "\6\21\1\0\11\21\1\0\1\21\1\0\1\6\2\21" +
                    "\1\0\2\21\12\0\1\6\4\21\1\157\24\21\1\6" +
                    "\2\0\6\21\1\6\10\0\6\21\1\0\11\21\1\0" +
                    "\1\21\1\0\1\6\2\21\1\0\2\21\12\0\1\6" +
                    "\1\21\1\160\5\21\1\161\6\21\1\162\6\21\1\163" +
                    "\1\21\1\164\1\165\1\6\2\0\6\21\1\6\10\0" +
                    "\6\21\1\0\11\21\1\0\1\166\1\0\1\6\2\21" +
                    "\1\0\2\21\12\0\1\6\1\167\5\21\1\170\1\171" +
                    "\5\21\1\172\13\21\1\6\2\0\6\21\1\6\10\0" +
                    "\6\21\1\0\6\21\1\173\2\21\1\0\1\21\1\0" +
                    "\1\6\2\21\1\0\2\21\12\0\1\6\3\21\1\174" +
                    "\4\21\1\152\5\21\1\175\12\21\1\6\2\0\6\21" +
                    "\1\6\10\0\6\21\1\0\11\21\1\0\1\21\1\0" +
                    "\1\6\2\21\1\0\2\21\12\0\1\6\1\176\30\21" +
                    "\1\6\2\0\6\21\1\6\10\0\6\21\1\0\11\21" +
                    "\1\0\1\21\1\0\1\6\2\21\1\0\2\21\12\0" +
                    "\1\6\2\21\1\177\1\21\1\200\22\21\1\201\1\21" +
                    "\1\6\2\0\1\202\5\21\1\6\10\0\6\21\1\0" +
                    "\11\21\1\0\1\203\1\0\1\6\2\21\1\0\2\21" +
                    "\12\0\1\6\3\21\1\204\2\21\1\205\22\21\1\6" +
                    "\2\0\6\21\1\6\10\0\1\206\5\16\1\0\11\16" +
                    "\1\0\1\16\1\0\1\6\2\16\1\0\2\16\12\0" +
                    "\1\6\31\16\1\6\2\0\6\16\1\6\10\0\6\21" +
                    "\1\0\11\21\1\0\1\21\1\0\1\6\2\21\1\0" +
                    "\2\21\12\0\1\6\3\21\1\152\3\21\1\207\21\21" +
                    "\1\6\2\0\6\21\1\6\10\0\6\21\1\0\11\21" +
                    "\1\0\1\210\1\0\1\6\2\21\1\0\2\21\12\0" +
                    "\1\6\4\21\1\211\1\21\1\212\22\21\1\6\2\0" +
                    "\6\21\1\6\10\0\6\16\1\0\11\16\1\0\1\16" +
                    "\1\0\1\6\2\16\1\0\2\16\12\0\1\6\21\16" +
                    "\1\213\7\16\1\6\2\0\6\16\1\6\10\0\6\16" +
                    "\1\0\11\16\1\0\1\16\1\0\1\6\2\16\1\0" +
                    "\2\16\12\0\1\6\17\16\1\214\11\16\1\6\2\0" +
                    "\6\16\1\6\10\0\6\21\1\0\11\21\1\0\1\21" +
                    "\1\0\1\6\2\21\1\0\2\21\12\0\1\6\7\21" +
                    "\1\215\5\21\1\216\13\21\1\6\2\0\6\21\1\6" +
                    "\10\0\6\21\1\0\11\21\1\0\1\21\1\0\1\6" +
                    "\2\21\1\0\2\21\12\0\1\6\15\21\1\217\13\21" +
                    "\1\6\2\0\6\21\1\6\10\0\6\21\1\0\11\21" +
                    "\1\0\1\21\1\0\1\6\2\21\1\0\2\21\12\0" +
                    "\1\6\1\145\3\21\1\220\10\21\1\152\13\21\1\6" +
                    "\2\0\6\21\1\6\10\0\6\21\1\0\11\21\1\0" +
                    "\1\21\1\0\1\6\2\21\1\0\2\21\12\0\1\6" +
                    "\5\21\1\221\1\222\1\223\5\21\1\224\13\21\1\6" +
                    "\2\0\6\21\1\6\10\0\6\21\1\0\11\21\1\0" +
                    "\1\21\1\0\1\6\2\21\1\0\2\21\12\0\1\6" +
                    "\6\21\1\217\6\21\1\225\13\21\1\6\2\0\6\21" +
                    "\1\6\10\0\6\226\1\0\4\226\2\6\1\226\1\6" +
                    "\1\226\1\0\1\226\1\0\1\6\2\226\1\0\2\226" +
                    "\12\0\1\6\31\226\1\6\2\0\6\226\1\6\10\0" +
                    "\6\21\1\0\11\21\1\0\1\21\1\0\1\6\2\21" +
                    "\1\0\2\21\12\0\1\6\12\21\1\227\16\21\1\6" +
                    "\2\0\6\21\2\70\1\0\34\70\1\0\22\70\1\0" +
                    "\4\70\1\0\21\70\1\0\5\70\10\0\1\230\163\0" +
                    "\1\231\1\0\1\232\116\0\1\233\150\0\1\234\5\0" +
                    "\2\76\1\0\4\76\1\0\25\76\2\0\60\76\1\235" +
                    "\2\0\30\235\1\0\20\235\1\0\42\235\11\0\6\236" +
                    "\1\0\4\236\2\0\1\236\1\0\1\236\1\0\1\236" +
                    "\5\0\2\236\13\0\31\236\3\0\6\236\2\103\1\0" +
                    "\32\103\1\0\52\103\1\0\6\103\1\237\2\0\30\237" +
                    "\1\0\20\237\1\0\42\237\11\0\6\110\1\0\11\110" +
                    "\1\0\1\110\2\0\2\110\1\0\2\110\13\0\31\110" +
                    "\3\0\6\110\11\0\6\110\1\0\4\110\2\111\1\110" +
                    "\1\111\1\110\1\0\1\110\2\0\2\110\1\0\2\110" +
                    "\13\0\31\110\3\0\6\110\11\0\6\112\1\0\11\112" +
                    "\1\0\1\112\2\0\2\112\1\0\2\112\13\0\31\112" +
                    "\3\0\6\112\11\0\6\112\1\0\11\112\1\0\1\112" +
                    "\2\0\2\112\1\0\2\112\13\0\15\112\1\240\13\112" +
                    "\3\0\6\112\11\0\6\112\1\0\11\112\1\0\1\112" +
                    "\2\0\2\112\1\0\2\112\13\0\16\112\1\241\12\112" +
                    "\3\0\6\112\11\0\6\112\1\0\11\112\1\0\1\112" +
                    "\2\0\2\112\1\0\2\112\13\0\1\242\30\112\3\0" +
                    "\6\112\11\0\6\112\1\0\11\112\1\0\1\112\2\0" +
                    "\2\112\1\0\2\112\13\0\3\112\1\243\25\112\3\0" +
                    "\6\112\11\0\6\112\1\0\11\112\1\0\1\112\2\0" +
                    "\2\112\1\0\2\112\13\0\6\112\1\244\1\245\21\112" +
                    "\3\0\6\112\11\0\6\112\1\0\11\112\1\0\1\112" +
                    "\2\0\2\112\1\0\2\112\13\0\3\112\1\246\25\112" +
                    "\3\0\6\112\11\0\6\112\1\0\11\112\1\0\1\112" +
                    "\2\0\2\112\1\0\2\112\13\0\2\112\1\247\24\112" +
                    "\1\250\1\112\3\0\6\112\11\0\6\112\1\0\11\112" +
                    "\1\0\1\251\2\0\2\112\1\0\2\112\13\0\31\112" +
                    "\3\0\6\112\11\0\6\112\1\0\11\112\1\0\1\112" +
                    "\2\0\2\112\1\0\2\112\13\0\15\112\1\252\13\112" +
                    "\3\0\6\112\66\0\1\253\30\0\1\125\2\0\30\125" +
                    "\1\0\20\125\1\0\42\125\37\0\1\254\57\0\1\6" +
                    "\10\0\6\16\1\0\11\16\1\0\1\16\1\0\1\6" +
                    "\2\16\1\0\2\16\12\0\1\6\17\16\1\255\11\16" +
                    "\1\6\2\0\6\16\1\6\10\0\6\16\1\0\4\16" +
                    "\2\130\1\16\1\130\1\16\1\0\1\16\1\0\1\6" +
                    "\2\16\1\0\2\16\12\0\1\6\31\16\1\6\2\0" +
                    "\6\16\17\0\1\32\25\0\1\37\51\0\1\132\10\0" +
                    "\6\132\1\0\11\132\1\0\1\132\1\0\3\132\1\0" +
                    "\2\132\12\0\33\132\2\0\7\132\10\0\6\132\1\0" +
                    "\4\132\2\256\1\132\1\256\1\132\1\257\1\132\1\0" +
                    "\3\132\1\0\2\132\1\257\11\0\33\132\2\0\7\132" +
                    "\10\0\6\132\1\0\2\132\1\134\1\132\2\136\1\132" +
                    "\1\136\1\132\1\0\1\132\1\0\3\132\1\0\1\132" +
                    "\1\135\12\0\5\132\1\134\1\135\12\132\1\135\5\132" +
                    "\1\135\3\132\2\0\7\132\10\0\6\132\1\0\2\132" +
                    "\1\134\1\132\2\137\1\132\1\137\1\132\1\0\1\132" +
                    "\1\0\3\132\1\0\1\132\1\135\1\0\1\136\10\0" +
                    "\5\132\1\134\1\135\12\132\1\135\5\132\1\135\3\132" +
                    "\2\0\7\132\10\0\6\132\1\0\1\132\1\260\1\134" +
                    "\1\132\1\137\1\140\1\132\1\140\1\132\1\0\1\132" +
                    "\1\0\3\132\1\0\1\132\1\135\1\0\1\136\10\0" +
                    "\5\132\1\134\1\135\1\132\1\260\10\132\1\135\5\132" +
                    "\1\135\3\132\2\0\7\132\10\0\1\132\1\261\4\132" +
                    "\1\0\2\132\1\261\1\132\4\261\1\132\1\0\1\132" +
                    "\1\0\3\132\1\0\1\132\1\261\12\0\5\132\3\261" +
                    "\5\132\1\261\3\132\2\261\4\132\2\261\2\132\2\0" +
                    "\6\132\1\6\10\0\6\21\1\0\11\21\1\0\1\21" +
                    "\1\0\1\6\2\21\1\0\2\21\12\0\1\6\4\21" +
                    "\1\262\24\21\1\6\2\0\6\21\1\6\10\0\6\21" +
                    "\1\0\11\21\1\0\1\21\1\0\1\6\2\21\1\0" +
                    "\2\21\12\0\1\6\15\21\1\263\13\21\1\6\2\0" +
                    "\6\21\1\6\10\0\1\21\1\264\4\21\1\0\11\21" +
                    "\1\0\1\21\1\0\1\6\2\21\1\0\1\21\1\265" +
                    "\12\0\1\6\20\21\1\266\1\21\1\267\6\21\1\6" +
                    "\2\0\2\21\1\270\3\21\1\6\10\0\6\21\1\0" +
                    "\11\21\1\0\1\21\1\0\1\6\2\21\1\0\2\21" +
                    "\12\0\1\6\4\21\1\152\24\21\1\6\2\0\6\21" +
                    "\1\6\10\0\6\21\1\0\11\21\1\0\1\21\1\0" +
                    "\1\6\2\21\1\0\2\21\12\0\1\6\10\21\1\271" +
                    "\20\21\1\6\2\0\6\21\1\6\10\0\6\147\1\0" +
                    "\11\147\1\0\1\147\1\0\1\6\2\21\1\0\2\147" +
                    "\12\0\1\6\31\147\1\6\2\0\6\147\1\6\10\0" +
                    "\6\21\1\0\11\21\1\0\1\21\1\0\1\6\2\21" +
                    "\1\0\2\21\12\0\1\6\11\21\1\272\17\21\1\6" +
                    "\2\0\6\21\1\6\10\0\6\21\1\0\11\21\1\0" +
                    "\1\21\1\0\1\6\2\21\1\0\2\21\12\0\1\6" +
                    "\2\21\1\273\5\21\1\274\16\21\1\275\1\21\1\6" +
                    "\2\0\6\21\1\6\10\0\6\21\1\0\11\21\1\0" +
                    "\1\21\1\0\1\6\2\21\1\0\2\21\12\0\1\6" +
                    "\25\21\1\276\3\21\1\6\2\0\6\21\1\6\10\0" +
                    "\6\21\1\0\11\21\1\0\1\277\1\0\1\6\2\21" +
                    "\1\0\2\21\12\0\1\6\24\21\1\152\4\21\1\6" +
                    "\2\0\6\21\1\6\10\0\6\21\1\0\11\21\1\0" +
                    "\1\21\1\0\1\6\2\21\1\0\2\21\12\0\1\6" +
                    "\3\21\1\300\25\21\1\6\2\0\6\21\1\6\10\0" +
                    "\6\21\1\0\11\21\1\0\1\21\1\0\1\6\2\21" +
                    "\1\0\2\21\12\0\1\6\2\21\1\301\26\21\1\6" +
                    "\2\0\5\21\1\302\1\6\10\0\6\21\1\0\11\21" +
                    "\1\0\1\21\1\0\1\6\2\21\1\0\2\21\12\0" +
                    "\1\6\11\21\1\303\17\21\1\6\2\0\6\21\1\6" +
                    "\10\0\6\21\1\0\11\21\1\0\1\21\1\0\1\6" +
                    "\2\21\1\0\2\21\12\0\1\6\10\21\1\304\20\21" +
                    "\1\6\2\0\6\21\1\6\10\0\6\21\1\0\11\21" +
                    "\1\0\1\21\1\0\1\6\2\21\1\0\2\21\12\0" +
                    "\1\6\26\21\1\305\2\21\1\6\2\0\6\21\1\6" +
                    "\10\0\6\21\1\0\11\21\1\0\1\21\1\0\1\6" +
                    "\2\21\1\0\2\21\12\0\1\6\1\306\1\21\1\307" +
                    "\26\21\1\6\2\0\6\21\1\6\10\0\6\21\1\0" +
                    "\11\21\1\0\1\21\1\0\1\6\2\21\1\0\2\21" +
                    "\12\0\1\6\12\21\1\310\16\21\1\6\2\0\6\21" +
                    "\1\6\10\0\6\21\1\0\11\21\1\0\1\21\1\0" +
                    "\1\6\2\21\1\0\2\21\12\0\1\6\6\21\1\311" +
                    "\22\21\1\6\2\0\6\21\1\6\10\0\6\21\1\0" +
                    "\11\21\1\0\1\21\1\0\1\6\2\21\1\0\2\21" +
                    "\12\0\1\6\16\21\1\312\12\21\1\6\2\0\6\21" +
                    "\1\6\10\0\6\21\1\0\11\21\1\0\1\21\1\0" +
                    "\1\6\2\21\1\0\2\21\12\0\1\6\16\21\1\165" +
                    "\12\21\1\6\2\0\6\21\1\6\10\0\6\21\1\0" +
                    "\11\21\1\0\1\21\1\0\1\6\2\21\1\0\2\21" +
                    "\12\0\1\6\7\21\1\313\21\21\1\6\2\0\6\21" +
                    "\1\6\10\0\6\21\1\0\11\21\1\0\1\21\1\0" +
                    "\1\6\2\21\1\0\2\21\12\0\1\6\15\21\1\314" +
                    "\13\21\1\6\2\0\6\21\1\6\10\0\6\21\1\0" +
                    "\11\21\1\0\1\21\1\0\1\6\2\21\1\0\2\21" +
                    "\12\0\1\6\3\21\1\315\25\21\1\6\2\0\6\21" +
                    "\1\6\10\0\6\21\1\0\11\21\1\0\1\21\1\0" +
                    "\1\6\2\21\1\0\2\21\12\0\1\6\10\21\1\316" +
                    "\20\21\1\6\2\0\6\21\1\6\10\0\6\21\1\0" +
                    "\11\21\1\0\1\21\1\0\1\6\2\21\1\0\2\21" +
                    "\12\0\1\6\3\21\1\317\25\21\1\6\2\0\6\21" +
                    "\1\6\10\0\6\21\1\0\11\21\1\0\1\21\1\0" +
                    "\1\6\2\21\1\0\2\21\12\0\1\6\26\21\1\152" +
                    "\2\21\1\6\2\0\6\21\1\6\10\0\6\21\1\0" +
                    "\11\21\1\0\1\21\1\0\1\6\2\21\1\0\2\21" +
                    "\12\0\1\6\10\21\1\320\20\21\1\6\2\0\6\21" +
                    "\1\6\10\0\6\21\1\0\11\21\1\0\1\21\1\0" +
                    "\1\6\2\21\1\0\2\21\12\0\1\6\3\21\1\321" +
                    "\2\21\1\322\17\21\1\323\2\21\1\6\2\0\6\21" +
                    "\1\6\10\0\6\21\1\0\11\21\1\0\1\21\1\0" +
                    "\1\6\2\21\1\0\2\21\12\0\1\6\7\21\1\324" +
                    "\21\21\1\6\2\0\6\21\1\6\10\0\6\21\1\0" +
                    "\11\21\1\0\1\21\1\0\1\6\2\21\1\0\2\21" +
                    "\12\0\1\6\6\21\1\325\22\21\1\6\2\0\6\21" +
                    "\1\6\10\0\6\21\1\0\11\21\1\0\1\21\1\0" +
                    "\1\6\2\21\1\0\2\21\12\0\1\6\1\326\30\21" +
                    "\1\6\2\0\6\21\1\6\10\0\6\21\1\0\6\21" +
                    "\1\327\2\21\1\0\1\21\1\0\1\6\2\21\1\0" +
                    "\2\21\12\0\1\6\31\21\1\6\2\0\6\21\1\6" +
                    "\10\0\6\21\1\0\11\21\1\0\1\21\1\0\1\6" +
                    "\2\21\1\0\2\21\12\0\1\6\1\330\14\21\1\331" +
                    "\13\21\1\6\2\0\6\21\1\6\10\0\6\21\1\0" +
                    "\11\21\1\0\1\21\1\0\1\6\2\21\1\0\2\21" +
                    "\12\0\1\6\3\21\1\332\25\21\1\6\2\0\6\21" +
                    "\1\6\10\0\6\16\1\0\10\16\1\333\1\0\1\16" +
                    "\1\0\1\6\2\16\1\0\2\16\12\0\1\6\31\16" +
                    "\1\6\2\0\6\16\1\6\10\0\6\21\1\0\11\21" +
                    "\1\0\1\21\1\0\1\6\2\21\1\0\2\21\12\0" +
                    "\1\6\26\21\1\334\2\21\1\6\2\0\6\21\1\6" +
                    "\10\0\6\21\1\0\11\21\1\0\1\21\1\0\1\6" +
                    "\2\21\1\0\2\21\12\0\1\6\1\21\1\335\5\21" +
                    "\1\336\21\21\1\6\2\0\6\21\1\6\10\0\6\21" +
                    "\1\0\11\21\1\0\1\21\1\0\1\6\2\21\1\0" +
                    "\2\21\12\0\1\6\31\21\1\6\2\0\1\152\5\21" +
                    "\1\6\10\0\6\21\1\0\11\21\1\0\1\21\1\0" +
                    "\1\6\2\21\1\0\2\21\12\0\1\6\1\21\1\337" +
                    "\27\21\1\6\2\0\6\21\1\6\10\0\6\16\1\0" +
                    "\1\16\1\340\7\16\1\0\1\16\1\0\1\6\2\16" +
                    "\1\0\2\16\12\0\1\6\31\16\1\6\2\0\6\16" +
                    "\1\6\10\0\6\16\1\0\1\16\1\341\7\16\1\0" +
                    "\1\16\1\0\1\6\2\16\1\0\2\16\12\0\1\6" +
                    "\31\16\1\6\2\0\6\16\1\6\10\0\6\21\1\0" +
                    "\11\21\1\0\1\21\1\0\1\6\2\21\1\0\2\21" +
                    "\12\0\1\6\15\21\1\342\13\21\1\6\2\0\6\21" +
                    "\1\6\10\0\6\21\1\0\11\21\1\0\1\21\1\0" +
                    "\1\6\2\21\1\0\2\21\12\0\1\6\2\21\1\310" +
                    "\26\21\1\6\2\0\6\21\1\6\10\0\6\21\1\0" +
                    "\11\21\1\0\1\21\1\0\1\6\2\21\1\0\2\21" +
                    "\12\0\1\6\3\21\1\152\25\21\1\6\2\0\6\21" +
                    "\1\6\10\0\6\21\1\0\11\21\1\0\1\21\1\0" +
                    "\1\6\2\21\1\0\2\21\12\0\1\6\5\21\1\343" +
                    "\21\21\1\344\1\21\1\6\2\0\6\21\1\6\10\0" +
                    "\6\21\1\0\11\21\1\0\1\345\1\0\1\6\2\21" +
                    "\1\0\2\21\12\0\1\6\31\21\1\6\2\0\6\21" +
                    "\1\6\10\0\6\21\1\0\11\21\1\0\1\21\1\0" +
                    "\1\6\2\21\1\0\2\21\12\0\1\6\2\21\1\346" +
                    "\5\21\1\145\20\21\1\6\2\0\6\21\1\6\10\0" +
                    "\6\21\1\0\11\21\1\0\1\21\1\0\1\6\2\21" +
                    "\1\0\2\21\12\0\1\6\6\21\1\347\6\21\1\350" +
                    "\13\21\1\6\2\0\6\21\1\6\10\0\6\21\1\0" +
                    "\11\21\1\0\1\21\1\0\1\6\2\21\1\0\2\21" +
                    "\12\0\1\6\16\21\1\351\12\21\1\6\2\0\6\21" +
                    "\1\6\10\0\6\21\1\0\11\21\1\0\1\21\1\0" +
                    "\1\6\2\21\1\0\2\21\12\0\1\6\1\352\30\21" +
                    "\1\6\2\0\6\21\1\6\10\0\6\226\1\0\11\226" +
                    "\1\0\1\226\1\0\1\6\2\226\1\0\2\226\12\0" +
                    "\1\6\31\226\1\6\2\0\6\226\1\6\10\0\6\21" +
                    "\1\0\11\21\1\0\1\21\1\0\1\6\2\21\1\0" +
                    "\2\21\12\0\1\6\1\353\3\21\1\354\24\21\1\6" +
                    "\2\0\6\21\64\0\1\355\120\0\1\356\107\0\1\357" +
                    "\150\0\1\360\16\0\6\236\1\0\11\236\1\0\1\236" +
                    "\5\0\2\236\13\0\31\236\3\0\6\236\11\0\6\112" +
                    "\1\0\11\112\1\0\1\112\2\0\2\112\1\0\2\112" +
                    "\13\0\15\112\1\361\13\112\3\0\6\112\11\0\6\112" +
                    "\1\0\11\112\1\0\1\112\2\0\2\112\1\0\2\112" +
                    "\13\0\2\112\1\362\26\112\3\0\6\112\11\0\6\112" +
                    "\1\0\11\112\1\0\1\112\2\0\2\112\1\0\2\112" +
                    "\13\0\25\112\1\363\3\112\3\0\6\112\11\0\6\112" +
                    "\1\0\11\112\1\0\1\364\2\0\2\112\1\0\2\112" +
                    "\13\0\31\112\3\0\6\112\11\0\6\112\1\0\11\112" +
                    "\1\0\1\112\2\0\2\112\1\0\2\112\13\0\7\112" +
                    "\1\365\21\112\3\0\6\112\11\0\6\112\1\0\11\112" +
                    "\1\0\1\112\2\0\2\112\1\0\2\112\13\0\15\112" +
                    "\1\366\13\112\3\0\6\112\11\0\6\112\1\0\11\112" +
                    "\1\0\1\112\2\0\2\112\1\0\2\112\13\0\3\112" +
                    "\1\367\25\112\3\0\6\112\11\0\6\112\1\0\11\112" +
                    "\1\0\1\112\2\0\2\112\1\0\2\112\13\0\3\112" +
                    "\1\370\25\112\3\0\6\112\11\0\6\112\1\0\11\112" +
                    "\1\0\1\112\2\0\2\112\1\0\2\112\13\0\6\112" +
                    "\1\371\22\112\3\0\6\112\11\0\6\112\1\0\11\112" +
                    "\1\0\1\112\2\0\2\112\1\0\2\112\13\0\1\112" +
                    "\1\362\5\112\1\372\21\112\3\0\6\112\11\0\6\112" +
                    "\1\0\11\112\1\0\1\112\2\0\2\112\1\0\2\112" +
                    "\13\0\1\373\30\112\3\0\6\112\67\0\1\374\37\0" +
                    "\1\375\106\0\1\6\10\0\6\16\1\0\2\16\1\376" +
                    "\6\16\1\0\1\16\1\0\1\6\2\16\1\0\2\16" +
                    "\12\0\1\6\31\16\1\6\2\0\6\16\1\132\10\0" +
                    "\6\132\1\0\4\132\2\256\1\132\1\256\1\132\1\0" +
                    "\1\132\1\0\3\132\1\0\1\132\1\135\12\0\6\132" +
                    "\1\135\12\132\1\135\5\132\1\135\3\132\2\0\6\132" +
                    "\24\0\2\256\1\0\1\256\67\0\1\132\10\0\1\132" +
                    "\1\261\4\132\1\0\1\132\1\260\1\261\1\132\4\261" +
                    "\1\132\1\0\1\132\1\0\3\132\1\0\1\132\1\261" +
                    "\12\0\5\132\3\261\1\260\4\132\1\261\3\132\2\261" +
                    "\4\132\2\261\2\132\2\0\6\132\1\6\10\0\6\21" +
                    "\1\0\11\21\1\0\1\21\1\0\1\6\2\21\1\0" +
                    "\2\21\12\0\1\6\6\21\1\377\22\21\1\6\2\0" +
                    "\6\21\1\6\10\0\6\21\1\0\11\21\1\0\1\21" +
                    "\1\0\1\6\2\21\1\0\2\21\12\0\1\6\7\21" +
                    "\1\335\21\21\1\6\2\0\6\21\1\6\10\0\6\21" +
                    "\1\0\1\21\1\u0100\7\21\1\0\1\21\1\0\1\6" +
                    "\2\21\1\0\2\21\12\0\1\6\31\21\1\6\2\0" +
                    "\6\21\1\6\10\0\3\21\1\u0101\2\21\1\0\11\21" +
                    "\1\0\1\21\1\0\1\6\2\21\1\0\2\21\12\0" +
                    "\1\6\31\21\1\6\2\0\6\21\1\6\10\0\3\21" +
                    "\1\u0102\2\21\1\0\11\21\1\0\1\21\1\0\1\6" +
                    "\2\21\1\0\2\21\12\0\1\6\17\21\1\u0103\11\21" +
                    "\1\6\2\0\6\21\1\6\10\0\6\21\1\0\11\21" +
                    "\1\0\1\21\1\0\1\6\2\21\1\0\2\21\12\0" +
                    "\1\6\21\21\1\u0104\7\21\1\6\2\0\6\21\1\6" +
                    "\10\0\6\21\1\0\2\21\1\u0105\6\21\1\0\1\21" +
                    "\1\0\1\6\2\21\1\0\2\21\12\0\1\6\31\21" +
                    "\1\6\2\0\6\21\1\6\10\0\6\21\1\0\11\21" +
                    "\1\0\1\21\1\0\1\6\2\21\1\0\2\21\12\0" +
                    "\1\6\4\21\1\320\24\21\1\6\2\0\6\21\1\6" +
                    "\10\0\6\21\1\0\11\21\1\0\1\21\1\0\1\6" +
                    "\2\21\1\0\2\21\12\0\1\6\7\21\1\u0106\21\21" +
                    "\1\6\2\0\6\21\1\6\10\0\6\21\1\0\11\21" +
                    "\1\0\1\21\1\0\1\6\2\21\1\0\2\21\12\0" +
                    "\1\6\4\21\1\u0107\24\21\1\6\2\0\6\21\1\6" +
                    "\10\0\6\21\1\0\11\21\1\0\1\21\1\0\1\6" +
                    "\2\21\1\0\2\21\12\0\1\6\2\21\1\u0108\26\21" +
                    "\1\6\2\0\6\21\1\6\10\0\6\21\1\0\11\21" +
                    "\1\0\1\21\1\0\1\6\2\21\1\0\2\21\12\0" +
                    "\1\6\7\21\1\u0109\21\21\1\6\2\0\6\21\1\6" +
                    "\10\0\6\21\1\0\11\21\1\0\1\21\1\0\1\6" +
                    "\2\21\1\0\2\21\12\0\1\6\4\21\1\352\24\21" +
                    "\1\6\2\0\6\21\1\6\10\0\6\21\1\0\11\21" +
                    "\1\0\1\21\1\0\1\6\2\21\1\0\2\21\12\0" +
                    "\1\6\4\21\1\u010a\24\21\1\6\2\0\6\21\1\6" +
                    "\10\0\6\21\1\0\11\21\1\0\1\21\1\0\1\6" +
                    "\2\21\1\0\2\21\12\0\1\6\15\21\1\211\13\21" +
                    "\1\6\2\0\6\21\1\6\10\0\6\21\1\0\11\21" +
                    "\1\0\1\u010b\1\0\1\6\2\21\1\0\2\21\12\0" +
                    "\1\6\31\21\1\6\2\0\6\21\1\6\10\0\6\21" +
                    "\1\0\11\21\1\0\1\u010c\1\0\1\6\2\21\1\0" +
                    "\2\21\12\0\1\6\31\21\1\6\2\0\6\21\1\6" +
                    "\10\0\6\21\1\0\11\21\1\0\1\21\1\0\1\6" +
                    "\2\21\1\0\2\21\12\0\1\6\2\21\1\u010d\26\21" +
                    "\1\6\2\0\6\21\1\6\10\0\6\21\1\0\11\21" +
                    "\1\0\1\21\1\0\1\6\2\21\1\0\2\21\12\0" +
                    "\1\6\4\21\1\u010e\24\21\1\6\2\0\6\21\1\6" +
                    "\10\0\6\21\1\0\11\21\1\0\1\21\1\0\1\6" +
                    "\2\21\1\0\2\21\12\0\1\6\1\324\4\21\1\u010f" +
                    "\2\21\1\u0110\15\21\1\u0111\2\21\1\6\2\0\1\u0112" +
                    "\5\21\1\6\10\0\6\21\1\0\11\21\1\0\1\21" +
                    "\1\0\1\6\2\21\1\0\2\21\12\0\1\6\2\21" +
                    "\1\u0113\26\21\1\6\2\0\6\21\1\6\10\0\6\21" +
                    "\1\0\11\21\1\0\1\21\1\0\1\6\2\21\1\0" +
                    "\2\21\12\0\1\6\4\21\1\u0114\24\21\1\6\2\0" +
                    "\6\21\1\6\10\0\6\21\1\0\11\21\1\0\1\21" +
                    "\1\0\1\6\2\21\1\0\2\21\12\0\1\6\15\21" +
                    "\1\152\13\21\1\6\2\0\6\21\1\6\10\0\6\21" +
                    "\1\0\11\21\1\0\1\21\1\0\1\6\2\21\1\0" +
                    "\2\21\12\0\1\6\7\21\1\152\21\21\1\6\2\0" +
                    "\6\21\1\6\10\0\6\21\1\0\11\21\1\0\1\21" +
                    "\1\0\1\6\2\21\1\0\2\21\12\0\1\6\27\21" +
                    "\1\u0115\1\21\1\6\2\0\6\21\1\6\10\0\6\21" +
                    "\1\0\11\21\1\0\1\21\1\0\1\6\2\21\1\0" +
                    "\2\21\12\0\1\6\10\21\1\277\20\21\1\6\2\0" +
                    "\6\21\1\6\10\0\6\21\1\0\11\21\1\0\1\21" +
                    "\1\0\1\6\2\21\1\0\2\21\12\0\1\6\6\21" +
                    "\1\u0116\22\21\1\6\2\0\6\21\1\6\10\0\6\21" +
                    "\1\0\11\21\1\0\1\21\1\0\1\6\2\21\1\0" +
                    "\2\21\12\0\1\6\4\21\1\u0117\24\21\1\6\2\0" +
                    "\6\21\1\6\10\0\6\21\1\0\11\21\1\0\1\21" +
                    "\1\0\1\6\2\21\1\0\2\21\12\0\1\6\2\21" +
                    "\1\u0118\26\21\1\6\2\0\6\21\1\6\10\0\6\21" +
                    "\1\0\11\21\1\0\1\21\1\0\1\6\2\21\1\0" +
                    "\2\21\12\0\1\6\6\21\1\u0119\22\21\1\6\2\0" +
                    "\6\21\1\6\10\0\6\21\1\0\11\21\1\0\1\21" +
                    "\1\0\1\6\2\21\1\0\2\21\12\0\1\6\2\21" +
                    "\1\152\26\21\1\6\2\0\6\21\1\6\10\0\6\21" +
                    "\1\0\11\21\1\0\1\21\1\0\1\6\2\21\1\0" +
                    "\2\21\12\0\1\6\1\u011a\30\21\1\6\2\0\6\21" +
                    "\1\6\10\0\6\21\1\0\11\21\1\0\1\21\1\0" +
                    "\1\6\2\21\1\0\2\21\12\0\1\6\2\21\1\u011b" +
                    "\26\21\1\6\2\0\6\21\1\6\10\0\1\21\1\u011c" +
                    "\4\21\1\0\11\21\1\0\1\21\1\0\1\6\2\21" +
                    "\1\0\2\21\12\0\1\6\31\21\1\6\2\0\6\21" +
                    "\1\6\10\0\6\21\1\0\11\21\1\0\1\21\1\0" +
                    "\1\6\2\21\1\0\2\21\12\0\1\6\5\21\1\152" +
                    "\23\21\1\6\2\0\6\21\1\6\10\0\6\21\1\0" +
                    "\11\21\1\0\1\21\1\0\1\6\2\21\1\0\2\21" +
                    "\12\0\1\6\7\21\1\u011d\21\21\1\6\2\0\6\21" +
                    "\1\6\10\0\6\21\1\0\11\21\1\0\1\21\1\0" +
                    "\1\6\2\21\1\0\2\21\12\0\1\6\2\21\1\346" +
                    "\26\21\1\6\2\0\6\21\1\6\10\0\6\21\1\0" +
                    "\11\21\1\0\1\21\1\0\1\6\2\21\1\0\2\21" +
                    "\12\0\1\6\7\21\1\u011b\21\21\1\6\2\0\6\21" +
                    "\1\6\10\0\6\21\1\0\11\21\1\0\1\21\1\0" +
                    "\1\6\2\21\1\0\2\21\12\0\1\6\16\21\1\320" +
                    "\11\21\1\u011e\1\6\2\0\6\21\1\6\10\0\6\21" +
                    "\1\0\11\21\1\0\1\21\1\0\1\6\2\21\1\0" +
                    "\2\21\12\0\1\6\2\21\1\u011f\26\21\1\6\2\0" +
                    "\6\21\1\6\10\0\6\21\1\0\11\21\1\0\1\21" +
                    "\1\0\1\6\2\21\1\0\2\21\12\0\1\6\4\21" +
                    "\1\u0120\24\21\1\6\2\0\6\21\1\6\10\0\6\16" +
                    "\1\0\11\16\1\0\1\16\1\0\1\6\2\16\1\0" +
                    "\2\16\12\0\1\6\14\16\1\u0121\14\16\1\6\2\0" +
                    "\6\16\1\6\10\0\6\21\1\0\10\21\1\u0122\1\0" +
                    "\1\21\1\0\1\6\2\21\1\0\2\21\12\0\1\6" +
                    "\31\21\1\6\2\0\6\21\1\6\10\0\6\21\1\0" +
                    "\11\21\1\0\1\21\1\0\1\6\2\21\1\0\2\21" +
                    "\12\0\1\6\7\21\1\u0123\21\21\1\6\2\0\6\21" +
                    "\1\6\10\0\6\21\1\0\11\21\1\0\1\21\1\0" +
                    "\1\6\2\21\1\0\2\21\12\0\1\6\4\21\1\u0124" +
                    "\24\21\1\6\2\0\6\21\1\6\10\0\1\255\5\16" +
                    "\1\0\11\16\1\0\1\16\1\0\1\6\2\16\1\0" +
                    "\2\16\12\0\1\6\31\16\1\6\2\0\6\16\1\6" +
                    "\10\0\6\16\1\0\1\16\1\u0125\7\16\1\0\1\16" +
                    "\1\0\1\6\2\16\1\0\2\16\12\0\1\6\31\16" +
                    "\1\6\2\0\6\16\1\6\10\0\6\21\1\0\6\21" +
                    "\1\165\2\21\1\0\1\21\1\0\1\6\2\21\1\0" +
                    "\2\21\12\0\1\6\31\21\1\6\2\0\6\21\1\6" +
                    "\10\0\6\21\1\0\11\21\1\0\1\21\1\0\1\6" +
                    "\2\21\1\0\2\21\12\0\1\6\6\21\1\u0126\22\21" +
                    "\1\6\2\0\6\21\1\6\10\0\6\21\1\0\11\21" +
                    "\1\0\1\21\1\0\1\6\2\21\1\0\2\21\12\0" +
                    "\1\6\7\21\1\u0127\21\21\1\6\2\0\6\21\1\6" +
                    "\10\0\6\21\1\0\11\21\1\0\1\21\1\0\1\6" +
                    "\2\21\1\0\2\21\12\0\1\6\16\21\1\u0128\12\21" +
                    "\1\6\2\0\6\21\1\6\10\0\6\21\1\0\11\21" +
                    "\1\0\1\21\1\0\1\6\2\21\1\0\2\21\12\0" +
                    "\1\6\27\21\1\u0129\1\21\1\6\2\0\6\21\1\6" +
                    "\10\0\6\21\1\0\11\21\1\0\1\21\1\0\1\6" +
                    "\2\21\1\0\2\21\12\0\1\6\10\21\1\u012a\20\21" +
                    "\1\6\2\0\6\21\1\6\10\0\6\21\1\0\11\21" +
                    "\1\0\1\21\1\0\1\6\2\21\1\0\2\21\12\0" +
                    "\1\6\16\21\1\145\12\21\1\6\2\0\6\21\1\6" +
                    "\10\0\6\21\1\0\11\21\1\0\1\21\1\0\1\6" +
                    "\2\21\1\0\2\21\12\0\1\6\2\21\1\u012b\5\21" +
                    "\1\320\20\21\1\6\2\0\6\21\1\6\10\0\6\21" +
                    "\1\0\11\21\1\0\1\21\1\0\1\6\2\21\1\0" +
                    "\2\21\12\0\1\6\26\21\1\335\2\21\1\6\2\0" +
                    "\6\21\1\6\10\0\6\21\1\0\11\21\1\0\1\21" +
                    "\1\0\1\6\2\21\1\0\2\21\12\0\1\6\7\21" +
                    "\1\145\21\21\1\6\2\0\6\21\1\6\10\0\6\21" +
                    "\1\0\11\21\1\0\1\21\1\0\1\6\2\21\1\0" +
                    "\2\21\12\0\1\6\3\21\1\145\25\21\1\6\2\0" +
                    "\6\21\61\0\1\356\106\0\1\u012c\133\0\1\u012d\73\0" +
                    "\1\u012e\64\0\6\112\1\0\11\112\1\0\1\112\2\0" +
                    "\2\112\1\0\2\112\13\0\7\112\1\362\21\112\3\0" +
                    "\6\112\11\0\6\112\1\0\11\112\1\0\1\112\2\0" +
                    "\2\112\1\0\2\112\13\0\4\112\1\373\24\112\3\0" +
                    "\6\112\11\0\6\112\1\0\11\112\1\0\1\112\2\0" +
                    "\2\112\1\0\2\112\13\0\4\112\1\u012f\24\112\3\0" +
                    "\6\112\11\0\6\112\1\0\11\112\1\0\1\112\2\0" +
                    "\2\112\1\0\2\112\13\0\10\112\1\364\20\112\3\0" +
                    "\6\112\11\0\6\112\1\0\11\112\1\0\1\112\2\0" +
                    "\2\112\1\0\2\112\13\0\6\112\1\241\22\112\3\0" +
                    "\6\112\11\0\6\112\1\0\11\112\1\0\1\112\2\0" +
                    "\2\112\1\0\2\112\13\0\6\112\1\u0130\22\112\3\0" +
                    "\6\112\11\0\6\112\1\0\11\112\1\0\1\112\2\0" +
                    "\2\112\1\0\2\112\13\0\1\u0131\30\112\3\0\6\112" +
                    "\11\0\6\112\1\0\11\112\1\0\1\112\2\0\2\112" +
                    "\1\0\2\112\13\0\7\112\1\u0132\21\112\3\0\6\112" +
                    "\11\0\6\112\1\0\11\112\1\0\1\112\2\0\2\112" +
                    "\1\0\2\112\13\0\7\112\1\u012f\21\112\3\0\6\112" +
                    "\11\0\6\112\1\0\11\112\1\0\1\112\2\0\2\112" +
                    "\1\0\2\112\13\0\26\112\1\362\2\112\3\0\6\112" +
                    "\66\0\1\150\30\0\1\6\10\0\6\21\1\0\11\21" +
                    "\1\0\1\21\1\0\1\6\2\21\1\0\2\21\12\0" +
                    "\1\6\31\21\1\6\2\0\4\21\1\152\1\21\1\6" +
                    "\10\0\6\21\1\0\11\21\1\0\1\21\1\0\1\6" +
                    "\2\21\1\0\2\21\12\0\1\6\21\21\1\u0133\7\21" +
                    "\1\6\2\0\6\21\1\6\10\0\2\21\1\u0134\3\21" +
                    "\1\0\11\21\1\0\1\21\1\0\1\6\2\21\1\0" +
                    "\2\21\12\0\1\6\31\21\1\6\2\0\6\21\1\6" +
                    "\10\0\6\21\1\0\1\21\1\u0135\7\21\1\0\1\21" +
                    "\1\0\1\6\2\21\1\0\2\21\12\0\1\6\31\21" +
                    "\1\6\2\0\6\21\1\6\10\0\6\21\1\0\11\21" +
                    "\1\0\1\21\1\0\1\6\2\21\1\0\2\21\12\0" +
                    "\1\6\22\21\1\u0136\6\21\1\6\2\0\6\21\1\6" +
                    "\10\0\6\21\1\0\11\21\1\0\1\21\1\0\1\6" +
                    "\2\21\1\0\2\21\12\0\1\6\31\21\1\6\2\0" +
                    "\2\21\1\u0137\3\21\1\6\10\0\5\21\1\u0138\1\0" +
                    "\11\21\1\0\1\21\1\0\1\6\2\21\1\0\2\21" +
                    "\12\0\1\6\31\21\1\6\2\0\6\21\1\6\10\0" +
                    "\6\21\1\0\11\21\1\0\1\21\1\0\1\6\2\21" +
                    "\1\0\2\21\12\0\1\6\4\21\1\u0139\24\21\1\6" +
                    "\2\0\6\21\1\6\10\0\6\21\1\0\11\21\1\0" +
                    "\1\21\1\0\1\6\2\21\1\0\2\21\12\0\1\6" +
                    "\3\21\1\u013a\25\21\1\6\2\0\6\21\1\6\10\0" +
                    "\6\21\1\0\11\21\1\0\1\21\1\0\1\6\2\21" +
                    "\1\0\2\21\12\0\1\6\6\21\1\u013b\22\21\1\6" +
                    "\2\0\6\21\1\6\10\0\6\21\1\0\11\21\1\0" +
                    "\1\u013c\1\0\1\6\2\21\1\0\2\21\12\0\1\6" +
                    "\31\21\1\6\2\0\6\21\1\6\10\0\5\21\1\u013d" +
                    "\1\0\11\21\1\0\1\21\1\0\1\6\2\21\1\0" +
                    "\2\21\12\0\1\6\31\21\1\6\2\0\6\21\1\6" +
                    "\10\0\6\21\1\0\11\21\1\0\1\21\1\0\1\6" +
                    "\2\21\1\0\2\21\12\0\1\6\3\21\1\u013e\25\21" +
                    "\1\6\2\0\6\21\1\6\10\0\6\21\1\0\11\21" +
                    "\1\0\1\21\1\0\1\6\2\21\1\0\2\21\12\0" +
                    "\1\6\1\u013f\30\21\1\6\2\0\6\21\1\6\10\0" +
                    "\6\21\1\0\11\21\1\0\1\21\1\0\1\6\2\21" +
                    "\1\0\2\21\12\0\1\6\24\21\1\152\4\21\1\6" +
                    "\2\0\6\21\1\6\10\0\6\21\1\0\11\21\1\0" +
                    "\1\21\1\0\1\6\2\21\1\0\2\21\12\0\1\6" +
                    "\1\324\30\21\1\6\2\0\6\21\1\6\10\0\6\21" +
                    "\1\0\11\21\1\0\1\21\1\0\1\6\2\21\1\0" +
                    "\2\21\12\0\1\6\15\21\1\172\13\21\1\6\2\0" +
                    "\6\21\1\6\10\0\6\21\1\0\11\21\1\0\1\21" +
                    "\1\0\1\6\2\21\1\0\2\21\12\0\1\6\31\21" +
                    "\1\6\2\0\1\202\5\21\1\6\10\0\6\21\1\0" +
                    "\11\21\1\0\1\21\1\0\1\6\2\21\1\0\2\21" +
                    "\12\0\1\6\4\21\1\u0140\24\21\1\6\2\0\6\21" +
                    "\1\6\10\0\6\21\1\0\11\21\1\0\1\21\1\0" +
                    "\1\6\2\21\1\0\2\21\12\0\1\6\12\21\1\u0141" +
                    "\16\21\1\6\2\0\6\21\1\6\10\0\6\21\1\0" +
                    "\11\21\1\0\1\21\1\0\1\6\2\21\1\0\2\21" +
                    "\12\0\1\6\16\21\1\u0142\12\21\1\6\2\0\6\21" +
                    "\1\6\10\0\6\21\1\0\11\21\1\0\1\21\1\0" +
                    "\1\6\2\21\1\0\2\21\12\0\1\6\2\21\1\u0143" +
                    "\26\21\1\6\2\0\6\21\1\6\10\0\6\21\1\0" +
                    "\11\21\1\0\1\21\1\0\1\6\2\21\1\0\2\21" +
                    "\12\0\1\6\2\21\1\335\26\21\1\6\2\0\6\21" +
                    "\1\6\10\0\6\21\1\0\11\21\1\0\1\21\1\0" +
                    "\1\6\2\21\1\0\2\21\12\0\1\6\6\21\1\346" +
                    "\22\21\1\6\2\0\6\21\1\6\10\0\6\21\1\0" +
                    "\11\21\1\0\1\21\1\0\1\6\2\21\1\0\2\21" +
                    "\12\0\1\6\3\21\1\u0144\25\21\1\6\2\0\6\21" +
                    "\1\6\10\0\6\21\1\0\11\21\1\0\1\21\1\0" +
                    "\1\6\2\21\1\0\2\21\12\0\1\6\24\21\1\335" +
                    "\4\21\1\6\2\0\6\21\1\6\10\0\6\21\1\0" +
                    "\11\21\1\0\1\21\1\0\1\6\2\21\1\0\2\21" +
                    "\12\0\1\6\16\21\1\u0145\12\21\1\6\2\0\6\21" +
                    "\1\6\10\0\6\21\1\0\11\21\1\0\1\21\1\0" +
                    "\1\6\2\21\1\0\2\21\12\0\1\6\1\u0146\30\21" +
                    "\1\6\2\0\6\21\1\6\10\0\6\21\1\0\11\21" +
                    "\1\0\1\21\1\0\1\6\2\21\1\0\2\21\12\0" +
                    "\1\6\7\21\1\u0147\21\21\1\6\2\0\6\21\1\6" +
                    "\10\0\6\21\1\0\11\21\1\0\1\21\1\0\1\6" +
                    "\2\21\1\0\2\21\12\0\1\6\6\21\1\u0148\22\21" +
                    "\1\6\2\0\6\21\1\6\10\0\6\21\1\0\11\21" +
                    "\1\0\1\21\1\0\1\6\2\21\1\0\2\21\12\0" +
                    "\1\6\6\21\1\u0149\22\21\1\6\2\0\6\21\1\6" +
                    "\10\0\6\21\1\0\11\21\1\0\1\21\1\0\1\6" +
                    "\2\21\1\0\2\21\12\0\1\6\4\21\1\u014a\24\21" +
                    "\1\6\2\0\6\21\1\6\10\0\6\21\1\0\11\21" +
                    "\1\0\1\21\1\0\1\6\2\21\1\0\2\21\12\0" +
                    "\1\6\16\21\1\320\12\21\1\6\2\0\6\21\1\6" +
                    "\10\0\6\16\1\0\11\16\1\0\1\16\1\0\1\6" +
                    "\2\16\1\0\2\16\12\0\1\6\15\16\1\u014b\13\16" +
                    "\1\6\2\0\6\16\1\6\10\0\6\21\1\0\11\21" +
                    "\1\0\1\21\1\0\1\6\2\21\1\0\2\21\12\0" +
                    "\1\6\5\21\1\221\23\21\1\6\2\0\6\21\1\6" +
                    "\10\0\6\21\1\0\11\21\1\0\1\21\1\0\1\6" +
                    "\2\21\1\0\2\21\12\0\1\6\10\21\1\u014c\20\21" +
                    "\1\6\2\0\6\21\1\6\10\0\6\21\1\0\11\21" +
                    "\1\0\1\u014d\1\0\1\6\2\21\1\0\2\21\12\0" +
                    "\1\6\31\21\1\6\2\0\6\21\1\6\10\0\6\21" +
                    "\1\0\11\21\1\0\1\21\1\0\1\6\2\21\1\0" +
                    "\2\21\12\0\1\6\6\21\1\354\22\21\1\6\2\0" +
                    "\6\21\1\6\10\0\6\21\1\0\11\21\1\0\1\21" +
                    "\1\0\1\6\2\21\1\0\2\21\12\0\1\6\27\21" +
                    "\1\u014e\1\21\1\6\2\0\6\21\1\6\10\0\6\21" +
                    "\1\0\11\21\1\0\1\21\1\0\1\6\2\21\1\0" +
                    "\2\21\12\0\1\6\12\21\1\152\16\21\1\6\2\0" +
                    "\6\21\1\6\10\0\6\21\1\0\11\21\1\0\1\21" +
                    "\1\0\1\6\2\21\1\0\2\21\12\0\1\6\10\21" +
                    "\1\152\20\21\1\6\2\0\6\21\1\6\10\0\6\21" +
                    "\1\0\11\21\1\0\1\21\1\0\1\6\2\21\1\0" +
                    "\2\21\12\0\1\6\1\u014f\30\21\1\6\2\0\6\21" +
                    "\10\0\1\u0150\157\0\1\u012c\13\0\1\356\36\0\2\u0151" +
                    "\1\0\7\u012e\1\0\10\u012e\2\u0151\1\u012e\1\0\1\u0151" +
                    "\1\0\1\u012e\1\u0151\2\u012e\2\u0151\1\0\1\u0151\1\0" +
                    "\4\u0151\2\0\31\u012e\3\u0151\6\u012e\11\0\5\112\1\u0152" +
                    "\1\0\11\112\1\0\1\112\2\0\2\112\1\0\2\112" +
                    "\13\0\31\112\3\0\6\112\11\0\6\112\1\0\11\112" +
                    "\1\0\1\112\2\0\2\112\1\0\2\112\13\0\24\112" +
                    "\1\362\4\112\3\0\6\112\11\0\6\112\1\0\11\112" +
                    "\1\0\1\112\2\0\2\112\1\0\2\112\13\0\16\112" +
                    "\1\u0153\12\112\3\0\6\112\11\0\6\112\1\0\11\112" +
                    "\1\0\1\112\2\0\2\112\1\0\2\112\13\0\6\112" +
                    "\1\u0154\22\112\3\0\6\112\1\6\10\0\1\u0155\5\21" +
                    "\1\0\11\21\1\0\1\21\1\0\1\6\2\21\1\0" +
                    "\2\21\12\0\1\6\31\21\1\6\2\0\6\21\1\6" +
                    "\10\0\6\21\1\0\10\21\1\u0156\1\0\1\21\1\0" +
                    "\1\6\2\21\1\0\2\21\12\0\1\6\31\21\1\6" +
                    "\2\0\6\21\1\6\10\0\6\21\1\0\2\21\1\u0134" +
                    "\6\21\1\0\1\21\1\0\1\6\2\21\1\0\2\21" +
                    "\12\0\1\6\31\21\1\6\2\0\6\21\1\6\10\0" +
                    "\1\21\1\u0157\4\21\1\0\11\21\1\0\1\21\1\0" +
                    "\1\6\2\21\1\0\2\21\12\0\1\6\31\21\1\6" +
                    "\2\0\6\21\1\6\10\0\6\21\1\0\2\21\1\u0158" +
                    "\6\21\1\0\1\21\1\0\1\6\2\21\1\0\2\21" +
                    "\12\0\1\6\31\21\1\6\2\0\6\21\1\6\10\0" +
                    "\6\21\1\0\11\21\1\0\1\21\1\0\1\6\2\21" +
                    "\1\0\2\21\12\0\1\6\31\21\1\6\2\0\3\21" +
                    "\1\u0159\2\21\1\6\10\0\6\21\1\0\11\21\1\0" +
                    "\1\21\1\0\1\6\2\21\1\0\2\21\12\0\1\6" +
                    "\1\21\1\u015a\27\21\1\6\2\0\6\21\1\6\10\0" +
                    "\6\21\1\0\11\21\1\0\1\21\1\0\1\6\2\21" +
                    "\1\0\2\21\12\0\1\6\5\21\1\u015b\23\21\1\6" +
                    "\2\0\6\21\1\6\10\0\6\21\1\0\11\21\1\0" +
                    "\1\21\1\0\1\6\2\21\1\0\2\21\12\0\1\6" +
                    "\16\21\1\u015c\12\21\1\6\2\0\6\21\1\6\10\0" +
                    "\6\21\1\0\11\21\1\0\1\21\1\0\1\6\2\21" +
                    "\1\0\2\21\12\0\1\6\26\21\1\u015d\2\21\1\6" +
                    "\2\0\6\21\1\6\10\0\6\21\1\0\11\21\1\0" +
                    "\1\21\1\0\1\6\2\21\1\0\2\21\12\0\1\6" +
                    "\24\21\1\u015e\4\21\1\6\2\0\6\21\1\6\10\0" +
                    "\6\21\1\0\11\21\1\0\1\21\1\0\1\6\2\21" +
                    "\1\0\2\21\12\0\1\6\16\21\1\u0113\12\21\1\6" +
                    "\2\0\6\21\1\6\10\0\6\21\1\0\11\21\1\0" +
                    "\1\21\1\0\1\6\2\21\1\0\2\21\12\0\1\6" +
                    "\3\21\1\u015d\25\21\1\6\2\0\6\21\1\6\10\0" +
                    "\6\21\1\0\11\21\1\0\1\21\1\0\1\6\2\21" +
                    "\1\0\2\21\12\0\1\6\27\21\1\344\1\21\1\6" +
                    "\2\0\6\21\1\6\10\0\6\21\1\0\11\21\1\0" +
                    "\1\21\1\0\1\6\2\21\1\0\2\21\12\0\1\6" +
                    "\1\353\30\21\1\6\2\0\6\21\1\6\10\0\6\21" +
                    "\1\0\11\21\1\0\1\21\1\0\1\6\2\21\1\0" +
                    "\2\21\12\0\1\6\26\21\1\u012a\2\21\1\6\2\0" +
                    "\6\21\1\6\10\0\6\21\1\0\11\21\1\0\1\21" +
                    "\1\0\1\6\2\21\1\0\2\21\12\0\1\6\1\u015f" +
                    "\30\21\1\6\2\0\6\21\1\6\10\0\6\21\1\0" +
                    "\11\21\1\0\1\21\1\0\1\6\2\21\1\0\2\21" +
                    "\12\0\1\6\6\21\1\u0160\22\21\1\6\2\0\6\21" +
                    "\1\6\10\0\6\21\1\0\11\21\1\0\1\21\1\0" +
                    "\1\6\2\21\1\0\2\21\12\0\1\6\23\21\1\335" +
                    "\5\21\1\6\2\0\6\21\1\6\10\0\6\21\1\0" +
                    "\11\21\1\0\1\21\1\0\1\6\2\21\1\0\2\21" +
                    "\12\0\1\6\27\21\1\152\1\21\1\6\2\0\6\21" +
                    "\1\6\10\0\6\21\1\0\11\21\1\0\1\21\1\0" +
                    "\1\6\2\21\1\0\2\21\12\0\1\6\6\21\1\347" +
                    "\22\21\1\6\2\0\6\21\1\6\10\0\6\21\1\0" +
                    "\11\21\1\0\1\21\1\0\1\6\2\21\1\0\2\21" +
                    "\12\0\1\6\3\21\1\335\25\21\1\6\2\0\6\21" +
                    "\1\6\10\0\6\21\1\0\11\21\1\0\1\21\1\0" +
                    "\1\6\2\21\1\0\2\21\12\0\1\6\2\21\1\145" +
                    "\26\21\1\6\2\0\6\21\1\6\10\0\6\21\1\0" +
                    "\11\21\1\0\1\21\1\0\1\6\2\21\1\0\2\21" +
                    "\12\0\1\6\27\21\1\u0161\1\21\1\6\2\0\6\21" +
                    "\1\6\10\0\6\16\1\0\11\16\1\0\1\16\1\0" +
                    "\1\6\2\16\1\0\2\16\12\0\1\6\15\16\1\u0162" +
                    "\13\16\1\6\2\0\6\16\1\6\10\0\6\21\1\0" +
                    "\11\21\1\0\1\21\1\0\1\6\2\21\1\0\2\21" +
                    "\12\0\1\6\11\21\1\u015b\17\21\1\6\2\0\6\21" +
                    "\1\6\10\0\6\21\1\0\11\21\1\0\1\21\1\0" +
                    "\1\6\2\21\1\0\2\21\12\0\1\6\7\21\1\320" +
                    "\21\21\1\6\2\0\6\21\1\6\10\0\6\21\1\0" +
                    "\11\21\1\0\1\21\1\0\1\6\2\21\1\0\2\21" +
                    "\12\0\1\6\2\21\1\u0163\26\21\1\6\2\0\6\21" +
                    "\1\6\10\0\6\21\1\0\11\21\1\0\1\21\1\0" +
                    "\1\6\2\21\1\0\2\21\12\0\1\6\16\21\1\u0164" +
                    "\12\21\1\6\2\0\6\21\10\0\1\u012e\117\0\6\112" +
                    "\1\0\11\112\1\0\1\112\2\0\2\112\1\0\2\112" +
                    "\13\0\24\112\1\u0165\4\112\3\0\6\112\11\0\6\112" +
                    "\1\0\11\112\1\0\1\112\2\0\2\112\1\0\2\112" +
                    "\13\0\23\112\1\362\5\112\3\0\6\112\11\0\6\112" +
                    "\1\0\11\112\1\0\1\112\2\0\2\112\1\0\2\112" +
                    "\13\0\3\112\1\362\25\112\3\0\6\112\1\6\10\0" +
                    "\1\u0134\5\21\1\0\11\21\1\0\1\21\1\0\1\6" +
                    "\2\21\1\0\2\21\12\0\1\6\31\21\1\6\2\0" +
                    "\6\21\1\6\10\0\6\21\1\0\10\21\1\152\1\0" +
                    "\1\21\1\0\1\6\2\21\1\0\2\21\12\0\1\6" +
                    "\31\21\1\6\2\0\6\21\1\6\10\0\5\21\1\u0166" +
                    "\1\0\11\21\1\0\1\21\1\0\1\6\2\21\1\0" +
                    "\2\21\12\0\1\6\31\21\1\6\2\0\6\21\1\6" +
                    "\10\0\1\u0167\5\21\1\0\11\21\1\0\1\21\1\0" +
                    "\1\6\2\21\1\0\2\21\12\0\1\6\31\21\1\6" +
                    "\2\0\6\21\1\6\10\0\6\21\1\0\11\21\1\0" +
                    "\1\21\1\0\1\6\2\21\1\0\2\21\12\0\1\6" +
                    "\31\21\1\6\2\0\1\21\1\u0168\4\21\1\6\10\0" +
                    "\6\21\1\0\11\21\1\0\1\21\1\0\1\6\2\21" +
                    "\1\0\2\21\12\0\1\6\4\21\1\u0169\24\21\1\6" +
                    "\2\0\6\21\1\6\10\0\6\21\1\0\11\21\1\0" +
                    "\1\21\1\0\1\6\2\21\1\0\2\21\12\0\1\6" +
                    "\6\21\1\u016a\22\21\1\6\2\0\6\21\1\6\10\0" +
                    "\6\21\1\0\11\21\1\0\1\21\1\0\1\6\2\21" +
                    "\1\0\2\21\12\0\1\6\27\21\1\u016b\1\21\1\6" +
                    "\2\0\6\21\1\6\10\0\6\21\1\0\11\21\1\0" +
                    "\1\21\1\0\1\6\2\21\1\0\2\21\12\0\1\6" +
                    "\4\21\1\u016c\24\21\1\6\2\0\6\21\1\6\10\0" +
                    "\6\21\1\0\11\21\1\0\1\21\1\0\1\6\2\21" +
                    "\1\0\2\21\12\0\1\6\11\21\1\u016d\17\21\1\6" +
                    "\2\0\6\21\1\6\10\0\6\21\1\0\11\21\1\0" +
                    "\1\21\1\0\1\6\2\21\1\0\2\21\12\0\1\6" +
                    "\15\21\1\u016e\13\21\1\6\2\0\6\21\1\6\10\0" +
                    "\6\21\1\0\11\21\1\0\1\21\1\0\1\6\2\21" +
                    "\1\0\2\21\12\0\1\6\27\21\1\320\1\21\1\6" +
                    "\2\0\6\21\1\6\10\0\6\21\1\0\11\21\1\0" +
                    "\1\21\1\0\1\6\2\21\1\0\2\21\12\0\1\6" +
                    "\2\21\1\u016f\26\21\1\6\2\0\6\21\1\6\10\0" +
                    "\6\16\1\0\11\16\1\0\1\16\1\0\1\6\2\16" +
                    "\1\0\2\16\12\0\1\6\7\16\1\u0170\21\16\1\6" +
                    "\2\0\6\16\1\6\10\0\6\21\1\0\11\21\1\0" +
                    "\1\21\1\0\1\6\2\21\1\0\2\21\12\0\1\6" +
                    "\1\u0171\30\21\1\6\2\0\6\21\1\6\10\0\6\21" +
                    "\1\0\11\21\1\0\1\145\1\0\1\6\2\21\1\0" +
                    "\2\21\12\0\1\6\31\21\1\6\2\0\6\21\11\0" +
                    "\6\112\1\0\11\112\1\0\1\112\2\0\2\112\1\0" +
                    "\2\112\13\0\11\112\1\u0172\17\112\3\0\6\112\1\6" +
                    "\10\0\3\21\1\u0173\2\21\1\0\11\21\1\0\1\21" +
                    "\1\0\1\6\2\21\1\0\2\21\12\0\1\6\31\21" +
                    "\1\6\2\0\6\21\1\6\10\0\4\21\1\u0174\1\21" +
                    "\1\0\11\21\1\0\1\21\1\0\1\6\2\21\1\0" +
                    "\2\21\12\0\1\6\31\21\1\6\2\0\6\21\1\6" +
                    "\10\0\6\21\1\0\11\21\1\0\1\21\1\0\1\6" +
                    "\2\21\1\0\1\21\1\u0134\12\0\1\6\31\21\1\6" +
                    "\2\0\6\21\1\6\10\0\6\21\1\0\11\21\1\0" +
                    "\1\21\1\0\1\6\2\21\1\0\2\21\12\0\1\6" +
                    "\16\21\1\u0175\12\21\1\6\2\0\6\21\1\6\10\0" +
                    "\6\21\1\0\11\21\1\0\1\21\1\0\1\6\2\21" +
                    "\1\0\2\21\12\0\1\6\27\21\1\145\1\21\1\6" +
                    "\2\0\6\21\1\6\10\0\6\21\1\0\11\21\1\0" +
                    "\1\21\1\0\1\6\2\21\1\0\2\21\12\0\1\6" +
                    "\4\21\1\u0176\24\21\1\6\2\0\6\21\1\6\10\0" +
                    "\6\21\1\0\10\21\1\u0177\1\0\1\21\1\0\1\6" +
                    "\2\21\1\0\2\21\12\0\1\6\31\21\1\6\2\0" +
                    "\6\21\1\6\10\0\6\21\1\0\11\21\1\0\1\21" +
                    "\1\0\1\6\2\21\1\0\2\21\12\0\1\6\4\21" +
                    "\1\335\24\21\1\6\2\0\6\21\1\6\10\0\6\21" +
                    "\1\0\11\21\1\0\1\21\1\0\1\6\2\21\1\0" +
                    "\2\21\12\0\1\6\16\21\1\u0178\12\21\1\6\2\0" +
                    "\6\21\1\6\10\0\6\21\1\0\11\21\1\0\1\21" +
                    "\1\0\1\6\2\21\1\0\2\21\12\0\1\6\4\21" +
                    "\1\175\24\21\1\6\2\0\6\21\1\6\10\0\6\16" +
                    "\1\0\11\16\1\0\1\16\1\0\1\6\2\16\1\0" +
                    "\2\16\12\0\1\6\4\16\1\u0179\24\16\1\6\2\0" +
                    "\6\16\1\6\10\0\6\21\1\0\11\21\1\0\1\21" +
                    "\1\0\1\6\2\21\1\0\2\21\12\0\1\6\15\21" +
                    "\1\u017a\13\21\1\6\2\0\6\21\11\0\6\112\1\0" +
                    "\11\112\1\0\1\112\2\0\2\112\1\0\2\112\13\0" +
                    "\4\112\1\362\24\112\3\0\6\112\1\6\10\0\6\21" +
                    "\1\0\11\21\1\0\1\21\1\0\1\6\2\21\1\0" +
                    "\2\21\12\0\1\6\31\21\1\6\2\0\1\21\1\u017b" +
                    "\4\21\1\6\10\0\6\21\1\0\11\21\1\0\1\21" +
                    "\1\0\1\6\2\21\1\0\2\21\12\0\1\6\21\21" +
                    "\1\u017c\7\21\1\6\2\0\6\21\1\6\10\0\6\21" +
                    "\1\0\11\21\1\0\1\21\1\0\1\6\2\21\1\0" +
                    "\2\21\12\0\1\6\2\21\1\u012a\26\21\1\6\2\0" +
                    "\6\21\1\6\10\0\6\21\1\0\11\21\1\0\1\21" +
                    "\1\0\1\6\2\21\1\0\2\21\12\0\1\6\15\21" +
                    "\1\324\13\21\1\6\2\0\6\21\1\6\10\0\6\21" +
                    "\1\0\11\21\1\0\1\21\1\0\1\6\2\21\1\0" +
                    "\2\21\12\0\1\6\15\21\1\u017d\13\21\1\6\2\0" +
                    "\6\21\1\6\10\0\6\16\1\0\11\16\1\0\1\16" +
                    "\1\0\1\6\2\16\1\0\2\16\12\0\1\6\6\16" +
                    "\1\u017e\22\16\1\6\2\0\6\16\1\6\10\0\6\21" +
                    "\1\0\11\21\1\0\1\21\1\0\1\6\2\21\1\0" +
                    "\2\21\12\0\1\6\16\21\1\152\12\21\1\6\2\0" +
                    "\6\21\1\6\10\0\6\21\1\0\11\21\1\0\1\21" +
                    "\1\0\1\6\2\21\1\0\2\21\12\0\1\6\22\21" +
                    "\1\u0134\6\21\1\6\2\0\6\21\1\6\10\0\1\21" +
                    "\1\u0135\4\21\1\0\11\21\1\0\1\21\1\0\1\6" +
                    "\2\21\1\0\2\21\12\0\1\6\31\21\1\6\2\0" +
                    "\6\21\1\6\10\0\6\21\1\0\11\21\1\0\1\21" +
                    "\1\0\1\6\2\21\1\0\2\21\12\0\1\6\16\21" +
                    "\1\u016a\12\21\1\6\2\0\6\21\1\6\10\0\6\16" +
                    "\1\0\11\16\1\0\1\16\1\0\1\6\2\16\1\0" +
                    "\2\16\12\0\1\6\16\16\1\u017f\12\16\1\6\2\0" +
                    "\6\16\1\6\10\0\6\16\1\0\1\16\1\u0180\7\16" +
                    "\1\0\1\16\1\0\1\6\2\16\1\0\2\16\12\0" +
                    "\1\6\31\16\1\6\2\0\6\16\1\6\10\0\6\16" +
                    "\1\0\11\16\1\0\1\16\1\0\1\6\2\16\1\0" +
                    "\2\16\12\0\1\6\1\u0181\30\16\1\6\2\0\6\16" +
                    "\1\6\10\0\6\16\1\0\11\16\1\0\1\16\1\0" +
                    "\1\6\2\16\1\0\2\16\12\0\1\6\2\16\1\u0182" +
                    "\26\16\1\6\2\0\6\16\1\6\10\0\6\16\1\0" +
                    "\11\16\1\0\1\16\1\0\1\6\2\16\1\0\2\16" +
                    "\12\0\1\6\4\16\1\u0183\24\16\1\6\2\0\6\16" +
                    "\1\6\10\0\6\16\1\0\11\16\1\0\1\16\1\0" +
                    "\1\6\2\16\1\0\2\16\12\0\1\6\3\16\1\u0184" +
                    "\25\16\1\6\2\0\6\16\1\6\10\0\6\16\1\0" +
                    "\11\16\1\0\1\16\1\0\1\6\2\16\1\0\2\16" +
                    "\12\0\1\6\6\16\1\u0185\22\16\1\6\2\0\6\16" +
                    "\1\6\10\0\6\16\1\0\11\16\1\0\1\16\1\0" +
                    "\1\6\2\16\1\0\2\16\12\0\1\6\7\16\1\376" +
                    "\21\16\1\6\2\0\6\16";

    private static int[] zzUnpackTrans() {
        int[] result = new int[28519];
        int offset = 0;
        offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackTrans(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            value--;
            do {
                result[j++] = value;
            } while (--count > 0);
        }
        return j;
    }


    /* error codes */
    private static final int ZZ_UNKNOWN_ERROR = 0;
    private static final int ZZ_NO_MATCH = 1;
    private static final int ZZ_PUSHBACK_2BIG = 2;

    /* error messages for the codes above */
    private static final String ZZ_ERROR_MSG[] = {
            "Unknown internal scanner error",
            "Error: could not match input",
            "Error: pushback value was too large"
    };

    /**
     * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
     */
    private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();

    private static final String ZZ_ATTRIBUTE_PACKED_0 =
            "\5\0\2\1\1\11\2\1\2\11\20\1\1\11\1\1" +
                    "\1\11\26\1\1\11\2\1\1\11\5\1\2\11\3\1" +
                    "\1\11\1\1\2\11\14\1\1\0\23\1\1\11\57\1" +
                    "\1\11\4\0\1\11\1\1\1\11\13\1\2\0\2\1" +
                    "\1\0\75\1\4\0\13\1\1\0\1\11\56\1\2\0" +
                    "\42\1\2\0\64\1";

    private static int[] zzUnpackAttribute() {
        int[] result = new int[389];
        int offset = 0;
        offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAttribute(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do {
                result[j++] = value;
            } while (--count > 0);
        }
        return j;
    }

    /**
     * the input device
     */
    private java.io.Reader zzReader;

    /**
     * the current state of the DFA
     */
    private int zzState;

    /**
     * the current lexical state
     */
    private int zzLexicalState = YYINITIAL;

    /**
     * this buffer contains the current text to be matched and is
     * the source of the yytext() string
     */
    private char zzBuffer[];

    /**
     * the textposition at the last accepting state
     */
    private int zzMarkedPos;

    /**
     * the current text position in the buffer
     */
    private int zzCurrentPos;

    /**
     * startRead marks the beginning of the yytext() string in the buffer
     */
    private int zzStartRead;

    /**
     * endRead marks the last character in the buffer, that has been read
     * from input
     */
    private int zzEndRead;

    /**
     * number of newlines encountered up to the start of the matched text
     */
    private int yyline;

    /**
     * the number of characters up to the start of the matched text
     */
    private int yychar;

    /**
     * the number of characters from the last newline up to the start of the
     * matched text
     */
    private int yycolumn;

    /**
     * zzAtBOL == true <=> the scanner is currently at the beginning of a line
     */
    private boolean zzAtBOL = true;

    /**
     * zzAtEOF == true <=> the scanner is at the EOF
     */
    private boolean zzAtEOF;

    /**
     * denotes if the user-EOF-code has already been executed
     */
    private boolean zzEOFDone;

    /**
     * The number of occupied positions in zzBuffer beyond zzEndRead.
     * When a lead/high surrogate has been read from the input stream
     * into the final zzBuffer position, this will have a value of 1;
     * otherwise, it will have a value of 0.
     */
    private int zzFinalHighSurrogate = 0;

  /* user code: */


    /**
     * Token type specifying we're in PHP.  This particular field is public so
     * that we can hack and key off of it for code completion.
     */
    public static final int INTERNAL_IN_PHP = -(4 << 11);

    /**
     * Token type specifying we're in a PHP multiline comment.
     */
    private static final int INTERNAL_IN_PHP_MLC = -(5 << 11);

    /**
     * Token type specifying we're in a PHP multiline string.
     */
    private static final int INTERNAL_IN_PHP_STRING = -(6 << 11);

    /**
     * Token type specifying we're in a PHP multiline char.
     */
    private static final int INTERNAL_IN_PHP_CHAR = -(7 << 11);

    /**
     * Whether closing markup tags are automatically completed for PHP.
     */
    private static boolean completeCloseTags;

    /**
     * The state PHP was started in (YYINITIAL, INTERNAL_IN_JS, etc.).
     */
    private int phpInState;

    /**
     * The language index we were in when PHP was started.
     */
    private int phpInLangIndex;

    /**
     * Language state set on PHP.
     */
    private static final int LANG_INDEX_PHP = 3;


    /**
     * Constructor.  This must be here because JFlex does not generate a
     * no-parameter constructor.
     */
    public TSPHPTokenMaker() {
        super();
    }


    /**
     * Adds the token specified to the current linked list of tokens as an
     * "end token;" that is, at <code>zzMarkedPos</code>.
     *
     * @param tokenType The token's type.
     */
    private void addEndToken(int tokenType) {
        addToken(zzMarkedPos, zzMarkedPos, tokenType);
    }


    /**
     * Adds the token specified to the current linked list of tokens.
     *
     * @param tokenType The token's type.
     * @see #addToken(int, int, int)
     */
    private void addHyperlinkToken(int start, int end, int tokenType) {
        int so = start + offsetShift;
        addToken(zzBuffer, start, end, tokenType, so, true);
    }


    /**
     * Adds an end token that encodes the information necessary to return
     * to the pre-PHP state and language index.
     *
     * @param endTokenState The PHP-related end-token state.
     */
    private void addPhpEndToken(int endTokenState) {
        addEndToken(endTokenState - phpInState - (phpInLangIndex << 16));
    }


    /**
     * Adds the token specified to the current linked list of tokens.
     *
     * @param tokenType The token's type.
     */
    private void addToken(int tokenType) {
        addToken(zzStartRead, zzMarkedPos - 1, tokenType);
    }


    /**
     * Adds the token specified to the current linked list of tokens.
     *
     * @param tokenType The token's type.
     */
    private void addToken(int start, int end, int tokenType) {
        int so = start + offsetShift;
        addToken(zzBuffer, start, end, tokenType, so);
    }


    /**
     * Adds the token specified to the current linked list of tokens.
     *
     * @param array       The character array.
     * @param start       The starting offset in the array.
     * @param end         The ending offset in the array.
     * @param tokenType   The token's type.
     * @param startOffset The offset in the document at which this token
     *                    occurs.
     */
    @Override
    public void addToken(char[] array, int start, int end, int tokenType, int startOffset) {
        super.addToken(array, start, end, tokenType, startOffset);
        zzStartRead = zzMarkedPos;
    }


    /**
     * {@inheritDoc}
     */
    @Override
    protected OccurrenceMarker createOccurrenceMarker() {
        return new HtmlOccurrenceMarker();
    }


    /**
     * Sets whether markup close tags should be completed.  You might not want
     * this to be the case, since some tags in standard HTML aren't usually
     * closed.
     *
     * @return Whether closing markup tags are completed.
     * @see #setCompleteCloseTags(boolean)
     */
    @Override
    public boolean getCompleteCloseTags() {
        return completeCloseTags;
    }


    @Override
    public boolean getCurlyBracesDenoteCodeBlocks(int languageIndex) {
        return languageIndex == LANG_INDEX_PHP;
    }


    /**
     * {@inheritDoc}
     */
    @Override
    public String[] getLineCommentStartAndEnd(int languageIndex) {
        return new String[]{"//", null};
    }


    /**
     * {@inheritDoc}
     */
    @Override
    public boolean getMarkOccurrencesOfTokenType(int type) {
        return type == Token.FUNCTION || type == Token.VARIABLE ||
                type == Token.MARKUP_TAG_NAME;
    }


    /**
     * Overridden to handle newlines in JS and CSS differently than those in
     * markup.
     */
    @Override
    public boolean getShouldIndentNextLineAfter(Token token) {
        int languageIndex = token == null ? 0 : token.getLanguageIndex();
        if (getCurlyBracesDenoteCodeBlocks(languageIndex)) {
            if (token != null && token.length() == 1) {
                char ch = token.charAt(0);
                return ch == '{' || ch == '(';
            }
        }
        return false;
    }


    /**
     * Returns the first token in the linked list of tokens generated
     * from <code>text</code>.  This method must be implemented by
     * subclasses so they can correctly implement syntax highlighting.
     *
     * @param text             The text from which to get tokens.
     * @param initialTokenType The token type we should start with.
     * @param startOffset      The offset into the document at which
     *                         <code>text</code> starts.
     * @return The first <code>Token</code> in a linked list representing
     * the syntax highlighted text.
     */
    public Token getTokenList(Segment text, int initialTokenType, int startOffset) {

        resetTokenList();
        this.offsetShift = -text.offset + startOffset;
        phpInState = YYINITIAL; // Shouldn't be necessary

        // Start off in the proper state
        int state;

        if (initialTokenType < -1024) { // INTERNAL_IN_PHPxxx - phpInState
            int main = -(-initialTokenType & 0x0000ff00);
            switch (main) {
                default: // Should never happen
                case INTERNAL_IN_PHP:
                    state = YYINITIAL;
                    phpInState = -initialTokenType & 0xff;
                    phpInLangIndex = (-initialTokenType & 0x00ff0000) >> 16;
                    break;
                case INTERNAL_IN_PHP_MLC:
                    state = PHP_MLC;
                    phpInState = -initialTokenType & 0xff;
                    phpInLangIndex = (-initialTokenType & 0x00ff0000) >> 16;
                    break;
                case INTERNAL_IN_PHP_STRING:
                    state = PHP_STRING;
                    phpInState = -initialTokenType & 0xff;
                    phpInLangIndex = (-initialTokenType & 0x00ff0000) >> 16;
                    break;
                case INTERNAL_IN_PHP_CHAR:
                    state = PHP_CHAR;
                    phpInState = -initialTokenType & 0xff;
                    phpInLangIndex = (-initialTokenType & 0x00ff0000) >> 16;
                    break;
            }
        } else {
            state = YYINITIAL;
        }

        setLanguageIndex(LANG_INDEX_PHP);
        start = text.offset;
        s = text;
        try {
            yyreset(zzReader);
            yybegin(state);
            return yylex();
        } catch (IOException ioe) {
            ioe.printStackTrace();
            return new TokenImpl();
        }

    }


    /**
     * Sets whether markup close tags should be completed.  You might not want
     * this to be the case, since some tags in standard HTML aren't usually
     * closed.
     *
     * @param complete Whether closing markup tags are completed.
     * @see #getCompleteCloseTags()
     */
    public static void setCompleteCloseTags(boolean complete) {
        completeCloseTags = complete;
    }


    /**
     * Overridden to remember the language index we're leaving.
     */
    @Override
    protected void yybegin(int state, int languageIndex) {
        phpInLangIndex = getLanguageIndex();
        yybegin(state);
        setLanguageIndex(languageIndex);
    }


    /**
     * Creates a new scanner
     *
     * @param in the java.io.Reader to read input from.
     */
    public TSPHPTokenMaker(java.io.Reader in) {
        this.zzReader = in;
    }


    /**
     * Unpacks the compressed character translation table.
     *
     * @param packed the packed character translation table
     * @return the unpacked character translation table
     */
    private static char[] zzUnpackCMap(String packed) {
        char[] map = new char[0x110000];
        int i = 0;  /* index in packed string  */
        int j = 0;  /* index in unpacked array */
        while (i < 230) {
            int count = packed.charAt(i++);
            char value = packed.charAt(i++);
            do {
                map[j++] = value;
            } while (--count > 0);
        }
        return map;
    }


    /**
     * Refills the input buffer.
     *
     * @return <code>true</code> if EOF was reached, otherwise
     * <code>false</code>.
     */
    private boolean zzRefill() {
        return zzCurrentPos >= s.offset + s.count;
    }


    /**
     * Closes the input stream.
     */
    public final void yyclose() throws java.io.IOException {
        zzAtEOF = true;            /* indicate end of file */
        zzEndRead = zzStartRead;  /* invalidate buffer    */

        if (zzReader != null) {
            zzReader.close();
        }
    }


    /**
     * Resets the scanner to read from a new input stream.
     * Does not close the old reader.
     * <p/>
     * All internal variables are reset, the old input stream
     * <b>cannot</b> be reused (internal buffer is discarded and lost).
     * Lexical state is set to <tt>YY_INITIAL</tt>.
     *
     * @param reader the new input stream
     */
    public final void yyreset(Reader reader) {
        // 's' has been updated.
        zzBuffer = s.array;
      /*
       * We replaced the line below with the two below it because zzRefill
       * no longer "refills" the buffer (since the way we do it, it's always
       * "full" the first time through, since it points to the segment's
       * array).  So, we assign zzEndRead here.
       */
        //zzStartRead = zzEndRead = s.offset;
        zzStartRead = s.offset;
        zzEndRead = zzStartRead + s.count - 1;
        zzCurrentPos = zzMarkedPos = s.offset;
        zzLexicalState = YYINITIAL;
        zzReader = reader;
        zzAtBOL = true;
        zzAtEOF = false;
    }


    /**
     * Returns the current lexical state.
     */
    public final int yystate() {
        return zzLexicalState;
    }


    /**
     * Enters a new lexical state
     *
     * @param newState the new lexical state
     */
    public final void yybegin(int newState) {
        zzLexicalState = newState;
    }


    /**
     * Returns the text matched by the current regular expression.
     */
    public final String yytext() {
        return new String(zzBuffer, zzStartRead, zzMarkedPos - zzStartRead);
    }


    /**
     * Returns the character at position <tt>pos</tt> from the
     * matched text.
     * <p/>
     * It is equivalent to yytext().charAt(pos), but faster
     *
     * @param pos the position of the character to fetch.
     *            A value from 0 to yylength()-1.
     * @return the character at position pos
     */
    public final char yycharat(int pos) {
        return zzBuffer[zzStartRead + pos];
    }


    /**
     * Returns the length of the matched text region.
     */
    public final int yylength() {
        return zzMarkedPos - zzStartRead;
    }


    /**
     * Reports an error that occured while scanning.
     * <p/>
     * In a wellformed scanner (no or only correct usage of
     * yypushback(int) and a match-all fallback rule) this method
     * will only be called with things that "Can't Possibly Happen".
     * If this method is called, something is seriously wrong
     * (e.g. a JFlex bug producing a faulty scanner etc.).
     * <p/>
     * Usual syntax/scanner level error handling should be done
     * in error fallback rules.
     *
     * @param errorCode the code of the errormessage to display
     */
    private void zzScanError(int errorCode) {
        String message;
        try {
            message = ZZ_ERROR_MSG[errorCode];
        } catch (ArrayIndexOutOfBoundsException e) {
            message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
        }

        throw new Error(message);
    }


    /**
     * Pushes the specified amount of characters back into the input stream.
     * <p/>
     * They will be read again by then next call of the scanning method
     *
     * @param number the number of characters to be read again.
     *               This number must not be greater than yylength()!
     */
    public void yypushback(int number) {
        if (number > yylength()) {
            zzScanError(ZZ_PUSHBACK_2BIG);
        }

        zzMarkedPos -= number;
    }


    /**
     * Resumes scanning until the next regular expression is matched,
     * the end of input is encountered or an I/O-Error occurs.
     *
     * @return the next token
     * @throws java.io.IOException if any I/O-Error occurs
     */
    public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {
        int zzInput;
        int zzAction;

        // cached fields:
        int zzCurrentPosL;
        int zzMarkedPosL;
        int zzEndReadL = zzEndRead;
        char[] zzBufferL = zzBuffer;
        char[] zzCMapL = ZZ_CMAP;

        int[] zzTransL = ZZ_TRANS;
        int[] zzRowMapL = ZZ_ROWMAP;
        int[] zzAttrL = ZZ_ATTRIBUTE;

        while (true) {
            zzMarkedPosL = zzMarkedPos;

            zzAction = -1;

            zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

            zzState = ZZ_LEXSTATE[zzLexicalState];

            // set up zzAction for empty match case:
            int zzAttributes = zzAttrL[zzState];
            if ((zzAttributes & 1) == 1) {
                zzAction = zzState;
            }


            zzForAction:
            {
                while (true) {

                    if (zzCurrentPosL < zzEndReadL) {
                        zzInput = zzBufferL[zzCurrentPosL++];
                    } else if (zzAtEOF) {
                        zzInput = YYEOF;
                        break zzForAction;
                    } else {
                        // store back cached positions
                        zzCurrentPos = zzCurrentPosL;
                        zzMarkedPos = zzMarkedPosL;
                        boolean eof = zzRefill();
                        // get translated positions and possibly new buffer
                        zzCurrentPosL = zzCurrentPos;
                        zzMarkedPosL = zzMarkedPos;
                        zzBufferL = zzBuffer;
                        zzEndReadL = zzEndRead;
                        if (eof) {
                            zzInput = YYEOF;
                            break zzForAction;
                        } else {
                            zzInput = zzBufferL[zzCurrentPosL++];
                        }
                    }
                    int zzNext = zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];
                    if (zzNext == -1) {
                        break zzForAction;
                    }
                    zzState = zzNext;

                    zzAttributes = zzAttrL[zzState];
                    if ((zzAttributes & 1) == 1) {
                        zzAction = zzState;
                        zzMarkedPosL = zzCurrentPosL;
                        if ((zzAttributes & 8) == 8) {
                            break zzForAction;
                        }
                    }

                }
            }

            // store back cached position
            zzMarkedPos = zzMarkedPosL;

            if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
                zzAtEOF = true;
                switch (zzLexicalState) {
                    case YYINITIAL: {
                        addPhpEndToken(INTERNAL_IN_PHP);
                        return firstToken;
                    }
                    case 390:
                        break;
                    case PHP_MLC: {
                        addToken(start, zzStartRead - 1, Token.COMMENT_MULTILINE);
                        addPhpEndToken(INTERNAL_IN_PHP_MLC);
                        return firstToken;
                    }
                    case 391:
                        break;
                    case PHP_STRING: {
                        addToken(start, zzStartRead - 1, Token.LITERAL_STRING_DOUBLE_QUOTE);
                        addPhpEndToken(INTERNAL_IN_PHP_STRING);
                        return firstToken;
                    }
                    case 392:
                        break;
                    case PHP_CHAR: {
                        addToken(start, zzStartRead - 1, Token.LITERAL_CHAR);
                        addPhpEndToken(INTERNAL_IN_PHP_CHAR);
                        return firstToken;
                    }
                    case 393:
                        break;
                    case Function: {
                        addPhpEndToken(INTERNAL_IN_PHP);
                        return firstToken;
                    }
                    case 394:
                        break;
                    default:
                        return null;
                }
            } else {
                switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
                    case 1: {
                        addToken(Token.ERROR_IDENTIFIER);
                    }
                    case 39:
                        break;
                    case 2: {
                        addToken(Token.WHITESPACE);
                    }
                    case 40:
                        break;
                    case 3: {
                        addPhpEndToken(INTERNAL_IN_PHP);
                        return firstToken;
                    }
                    case 41:
                        break;
                    case 4: {
                        addToken(Token.OPERATOR);
                    }
                    case 42:
                        break;
                    case 5: {
                        addToken(Token.IDENTIFIER);
                    }
                    case 43:
                        break;
                    case 6: {
                        start = zzMarkedPos - 1;
                        yybegin(PHP_STRING);
                    }
                    case 44:
                        break;
                    case 7: {
                        addToken(Token.MARKUP_ENTITY_REFERENCE);
                    }
                    case 45:
                        break;
                    case 8: {
                        addToken(Token.MARKUP_TAG_NAME);
                    }
                    case 46:
                        break;
                    case 9: {
                        addToken(Token.LITERAL_NUMBER_DECIMAL_INT);
                    }
                    case 47:
                        break;
                    case 10: {
                        addToken(Token.COMMENT_EOL);
                        addPhpEndToken(INTERNAL_IN_PHP);
                        return firstToken;
                    }
                    case 48:
                        break;
                    case 11: {
                        addToken(Token.SEPARATOR);
                    }
                    case 49:
                        break;
                    case 12: {
                        start = zzMarkedPos - 1;
                        yybegin(PHP_CHAR);
                    }
                    case 50:
                        break;
                    case 13: {
                    }
                    case 51:
                        break;
                    case 14: {
                        addToken(start, zzStartRead - 1, Token.COMMENT_MULTILINE);
                        addPhpEndToken(INTERNAL_IN_PHP_MLC);
                        return firstToken;
                    }
                    case 52:
                        break;
                    case 15: {
                        addToken(start, zzStartRead - 1, Token.LITERAL_STRING_DOUBLE_QUOTE);
                        addPhpEndToken(INTERNAL_IN_PHP_STRING);
                        return firstToken;
                    }
                    case 53:
                        break;
                    case 16: {
                        yybegin(YYINITIAL);
                        addToken(start, zzStartRead, Token.LITERAL_STRING_DOUBLE_QUOTE);
                    }
                    case 54:
                        break;
                    case 17: { /* Skip escaped chars. */
                    }
                    case 55:
                        break;
                    case 18: {
                        addToken(start, zzStartRead - 1, Token.LITERAL_CHAR);
                        addPhpEndToken(INTERNAL_IN_PHP_CHAR);
                        return firstToken;
                    }
                    case 56:
                        break;
                    case 19: { /* Skip escaped single quotes only, but this should still work. */
                    }
                    case 57:
                        break;
                    case 20: {
                        yybegin(YYINITIAL);
                        addToken(start, zzStartRead, Token.LITERAL_CHAR);
                    }
                    case 58:
                        break;
                    case 21: {
                        addToken(Token.IDENTIFIER);
                        yybegin(YYINITIAL);
                    }
                    case 59:
                        break;
                    case 22: {
                        addToken(Token.FUNCTION);
                    }
                    case 60:
                        break;
                    case 23: {
                        start = zzMarkedPos - 2;
                        yybegin(PHP_MLC);
                    }
                    case 61:
                        break;
                    case 24: {
                        addToken(Token.ERROR_NUMBER_FORMAT);
                    }
                    case 62:
                        break;
                    case 25: {
                        addToken(Token.LITERAL_NUMBER_FLOAT);
                    }
                    case 63:
                        break;
                    case 26: {
                        addToken(Token.LITERAL_NUMBER_HEXADECIMAL);
                    }
                    case 64:
                        break;
                    case 27: {
                        addToken(Token.VARIABLE);
                    }
                    case 65:
                        break;
                    case 28: {
                        addToken(Token.MARKUP_TAG_DELIMITER);
                    }
                    case 66:
                        break;
                    case 29: {
                        addToken(Token.RESERVED_WORD);
                    }
                    case 67:
                        break;
                    case 30: {
                        int count = yylength();
                        addToken(zzStartRead, zzStartRead, Token.FUNCTION);
                        zzMarkedPos -= (count - 1); //yypushback(count-1);
                    }
                    case 68:
                        break;
                    case 31: {
                        yybegin(YYINITIAL);
                        addToken(start, zzStartRead + 1, Token.COMMENT_MULTILINE);
                    }
                    case 69:
                        break;
                    case 32: {
                        int temp = zzStartRead;
                        addToken(start, zzStartRead - 1, Token.LITERAL_STRING_DOUBLE_QUOTE);
                        addToken(temp, zzMarkedPos - 1, Token.VARIABLE);
                        start = zzMarkedPos;
                    }
                    case 70:
                        break;
                    case 33: {
                        addToken(Token.DATA_TYPE);
                    }
                    case 71:
                        break;
                    case 34: {
                        addToken(Token.COMMENT_MULTILINE);
                    }
                    case 72:
                        break;
                    case 35: {
                        addToken(Token.LITERAL_BOOLEAN);
                    }
                    case 73:
                        break;
                    case 36: {
                        addToken(Token.RESERVED_WORD_2);
                    }
                    case 74:
                        break;
                    case 37: {
                        int temp = zzStartRead;
                        addToken(start, zzStartRead - 1, Token.COMMENT_MULTILINE);
                        addHyperlinkToken(temp, zzMarkedPos - 1, Token.COMMENT_MULTILINE);
                        start = zzMarkedPos;
                    }
                    case 75:
                        break;
                    case 38: {
                        addToken(Token.RESERVED_WORD);
                        yybegin(Function);
                    }
                    case 76:
                        break;
                    default:
                        zzScanError(ZZ_NO_MATCH);
                }
            }
        }
    }


}
